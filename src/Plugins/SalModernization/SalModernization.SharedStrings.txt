#
# This file contains key values pairs which are used to expand variable references in
# the JSON-based regex pattern definition files. This is useful both to share common
# regex patterns across multiple rules but also to avoid the complexities of escaping
# JSON string literals. The strings below are directly testable in web sites such as 
# reg101.com.
#
# Shared strings can be assembled even within this file as long as any shared pattern
# in a strings only contains variables which are defined earlier in the file. So, 
# a pattern like this is ok (but these lines in reverse order are not).
#
# $MyExample=[a-z]
# $MyExpandedExample=($MyExample|[0-9])
#
# Blank lines are ignored when parsing, as are lines that begin with a '#' character.
# Leading spaces are trimmed at parse time, allowing for indentation.

# Common patterns for file allow and deny lists.
#
  $CSourceFiles=(?i)\.(c|cpp|cxx)$
  $BinaryFiles=(?i)\.(bmp|dll|exe|gif|jpe?g|lock|pack|png|psd|tar\.gz|tiff?|ttf|wmf|xcf|zip)$
  $SourceFiles=(?i)\.(azure|bat|c|cmd|config|cpp|cs|cscfg|definitions|dtsx|h|hxx|hpp|ini|java|jsx?|json|keys|kt|loadtest|m|md|php|properties|ps1|psm1|pubxml|py|resx|sample|sql|ste|swift|test|tsx?|txt|waz|xml)$

$SEC105/001.allocator=[^\w_](?P<refine>__allocator)[^\w_]
$SEC105/002.analysisassume=[^\w_](?P<refine>__analysis_assume)[^\w_]
$SEC105/003.assumebound=[^\w_](?P<refine>__assume_bound)[^\w_]
$SEC105/003.bcount=[^\w_](?P<refine>__bcount)[^\w_]
$SEC105/003.bcountopt=[^\w_](?P<refine>__bcount_opt)[^\w_]
$SEC105/001.bound=[^\w_](?P<refine>__bound)[^\w_]
$SEC105/002.bytereadableTo=[^\w_](?P<refine>__byte_readableTo)[^\w_]
$SEC105/002.bytewritableTo=[^\w_](?P<refine>__byte_writableTo)[^\w_]
$SEC105/002.checkReturn=[^\w_](?P<refine>__checkReturn)[^\w_]
$SEC105/003.controlentrypoint=[^\w_](?P<refine>__control_entrypoint)[^\w_]
$SEC105/003.dataentrypoint=[^\w_](?P<refine>__data_entrypoint)[^\w_]
$SEC105/003.deref=[^\w_](?P<refine>__deref)[^\w_]
$SEC105/003.derefbcount=[^\w_](?P<refine>__deref_bcount)[^\w_]
$SEC105/003.derefecount=[^\w_](?P<refine>__deref_ecount)[^\w_]
$SEC105/003.derefecountopt=[^\w_](?P<refine>__deref_ecount_opt)[^\w_]
$SEC105/002.derefin=[^\w_](?P<refine>__deref_in)[^\w_]
$SEC105/003.derefinbcountopt=[^\w_](?P<refine>__deref_in_bcount_opt)[^\w_]
$SEC105/003.derefinoptout=[^\w_](?P<refine>__deref_in_opt_out)[^\w_]
$SEC105/003.derefinrange=[^\w_](?P<refine>__deref_in_range)[^\w_]
$SEC105/002.derefinout=[^\w_](?P<refine>__deref_inout)[^\w_]
$SEC105/003.derefinoutbcount=[^\w_](?P<refine>__deref_inout_bcount)[^\w_]
$SEC105/003.derefinoutbcountopt=[^\w_](?P<refine>__deref_inout_bcount_opt)[^\w_]
$SEC105/003.derefinoutbcountpart=[^\w_](?P<refine>__deref_inout_bcount_part)[^\w_]
$SEC105/003.derefinoutecount=[^\w_](?P<refine>__deref_inout_ecount)[^\w_]
$SEC105/003.derefinoutecountpart=[^\w_](?P<refine>__deref_inout_ecount_part)[^\w_]
$SEC105/003.derefinoutecountz=[^\w_](?P<refine>__deref_inout_ecount_z)[^\w_]
$SEC105/002.derefinoutopt=[^\w_](?P<refine>__deref_inout_opt)[^\w_]
$SEC105/003.derefinoutrange=[^\w_](?P<refine>__deref_inout_range)[^\w_]
$SEC105/003.derefinoutxcount=[^\w_](?P<refine>__deref_inout_xcount)[^\w_]
$SEC105/003.derefinoutz=[^\w_](?P<refine>__deref_inout_z)[^\w_]
$SEC105/002.derefoptinout=[^\w_](?P<refine>__deref_opt_inout)[^\w_]
$SEC105/003.derefoptinoutbcountfull=[^\w_](?P<refine>__deref_opt_inout_bcount_full)[^\w_]
$SEC105/003.derefoptinoutbcountpartopt=[^\w_](?P<refine>__deref_opt_inout_bcount_part_opt)[^\w_]
$SEC105/002.derefoptinoutopt=[^\w_](?P<refine>__deref_opt_inout_opt)[^\w_]
$SEC105/002.derefoptout=[^\w_](?P<refine>__deref_opt_out)[^\w_]
$SEC105/003.derefoptoutbcount=[^\w_](?P<refine>__deref_opt_out_bcount)[^\w_]
$SEC105/003.derefoptoutbcountfull=[^\w_](?P<refine>__deref_opt_out_bcount_full)[^\w_]
$SEC105/002.derefoptoutbcountopt=[^\w_](?P<refine>__deref_opt_out_bcount_opt)[^\w_]
$SEC105/003.derefoptoutecount=[^\w_](?P<refine>__deref_opt_out_ecount)[^\w_]
$SEC105/002.derefoptoutopt=[^\w_](?P<refine>__deref_opt_out_opt)[^\w_]
$SEC105/003.derefoptoutxcount=[^\w_](?P<refine>__deref_opt_out_xcount)[^\w_]
$SEC105/002.derefoptoutz=[^\w_](?P<refine>__deref_opt_out_z)[^\w_]
$SEC105/002.derefoptoutzopt=[^\w_](?P<refine>__deref_opt_out_z_opt)[^\w_]
$SEC105/002.derefout=[^\w_](?P<refine>__deref_out)[^\w_]
$SEC105/002.derefoutbcount=[^\w_](?P<refine>__deref_out_bcount)[^\w_]
$SEC105/003.derefoutbcountfull=[^\w_](?P<refine>__deref_out_bcount_full)[^\w_]
$SEC105/003.derefoutbcountfullopt=[^\w_](?P<refine>__deref_out_bcount_full_opt)[^\w_]
$SEC105/002.derefoutbcountopt=[^\w_](?P<refine>__deref_out_bcount_opt)[^\w_]
$SEC105/002.derefoutbcountpart=[^\w_](?P<refine>__deref_out_bcount_part)[^\w_]
$SEC105/002.derefoutecount=[^\w_](?P<refine>__deref_out_ecount)[^\w_]
$SEC105/003.derefoutecountfull=[^\w_](?P<refine>__deref_out_ecount_full)[^\w_]
$SEC105/003.derefoutecountfullopt=[^\w_](?P<refine>__deref_out_ecount_full_opt)[^\w_]
$SEC105/002.derefoutecountopt=[^\w_](?P<refine>__deref_out_ecount_opt)[^\w_]
$SEC105/002.derefoutecountpart=[^\w_](?P<refine>__deref_out_ecount_part)[^\w_]
$SEC105/003.derefoutecountzopt=[^\w_](?P<refine>__deref_out_ecount_z_opt)[^\w_]
$SEC105/002.derefoutopt=[^\w_](?P<refine>__deref_out_opt)[^\w_]
$SEC105/002.derefoutrange=[^\w_](?P<refine>__deref_out_range)[^\w_]
$SEC105/003.derefoutxcount=[^\w_](?P<refine>__deref_out_xcount)[^\w_]
$SEC105/003.derefoutxcountpart=[^\w_](?P<refine>__deref_out_xcount_part)[^\w_]
$SEC105/002.derefoutz=[^\w_](?P<refine>__deref_out_z)[^\w_]
$SEC105/002.derefoutzopt=[^\w_](?P<refine>__deref_out_z_opt)[^\w_]
$SEC105/003.ecount=[^\w_](?P<refine>__ecount)[^\w_]
$SEC105/002.elemreadableTo=[^\w_](?P<refine>__elem_readableTo)[^\w_]
$SEC105/002.elemwritableTo=[^\w_](?P<refine>__elem_writableTo)[^\w_]
$SEC105/003.exceptthat=[^\w_](?P<refine>__exceptthat)[^\w_]
$SEC105/002.fieldbcount=[^\w_](?P<refine>__field_bcount)[^\w_]
$SEC105/002.fieldbcountfull=[^\w_](?P<refine>__field_bcount_full)[^\w_]
$SEC105/002.fieldbcountopt=[^\w_](?P<refine>__field_bcount_opt)[^\w_]
$SEC105/002.fieldbcountpart=[^\w_](?P<refine>__field_bcount_part)[^\w_]
$SEC105/002.fieldbcountpartopt=[^\w_](?P<refine>__field_bcount_part_opt)[^\w_]
$SEC105/002.fieldecount=[^\w_](?P<refine>__field_ecount)[^\w_]
$SEC105/002.fieldecountfull=[^\w_](?P<refine>__field_ecount_full)[^\w_]
$SEC105/002.fieldecountopt=[^\w_](?P<refine>__field_ecount_opt)[^\w_]
$SEC105/002.fieldecountpart=[^\w_](?P<refine>__field_ecount_part)[^\w_]
$SEC105/002.fieldnullterminated=[^\w_](?P<refine>__field_nullterminated)[^\w_]
$SEC105/002.fieldrange=[^\w_](?P<refine>__field_range)[^\w_]
$SEC105/003.formatstring=[^\w_](?P<refine>__format_string)[^\w_]
$SEC105/001.gdientry=[^\w_](?P<refine>__gdi_entry)[^\w_]
$SEC105/002.in=[^\w_](?P<refine>__in)[^\w_]
$SEC105/002.inbcount=[^\w_](?P<refine>__in_bcount)[^\w_]
$SEC105/002.inbcountopt=[^\w_](?P<refine>__in_bcount_opt)[^\w_]
$SEC105/003.inbcountz=[^\w_](?P<refine>__in_bcount_z)[^\w_]
$SEC105/001.inbound=[^\w_](?P<refine>__in_bound)[^\w_]
$SEC105/002.inecount=[^\w_](?P<refine>__in_ecount)[^\w_]
$SEC105/002.inecountopt=[^\w_](?P<refine>__in_ecount_opt)[^\w_]
$SEC105/002.inecountorz=[^\w_](?P<refine>__in_ecount_or_z)[^\w_]
$SEC105/003.inecountz=[^\w_](?P<refine>__in_ecount_z)[^\w_]
$SEC105/002.inopt=[^\w_](?P<refine>__in_opt)[^\w_]
$SEC105/002.inrange=[^\w_](?P<refine>__in_range)[^\w_]
$SEC105/003.inxcount=[^\w_](?P<refine>__in_xcount)[^\w_]
$SEC105/003.inxcountopt=[^\w_](?P<refine>__in_xcount_opt)[^\w_]
$SEC105/002.inz=[^\w_](?P<refine>__in_z)[^\w_]
$SEC105/002.inzopt=[^\w_](?P<refine>__in_z_opt)[^\w_]
$SEC105/003.inexpressiblereadableTo=[^\w_](?P<refine>__inexpressible_readableTo)[^\w_]
$SEC105/002.inout=[^\w_](?P<refine>__inout)[^\w_]
$SEC105/002.inoutbcount=[^\w_](?P<refine>__inout_bcount)[^\w_]
$SEC105/003.inoutbcountfull=[^\w_](?P<refine>__inout_bcount_full)[^\w_]
$SEC105/003.inoutbcountfullopt=[^\w_](?P<refine>__inout_bcount_full_opt)[^\w_]
$SEC105/002.inoutbcountopt=[^\w_](?P<refine>__inout_bcount_opt)[^\w_]
$SEC105/002.inoutbcountpart=[^\w_](?P<refine>__inout_bcount_part)[^\w_]
$SEC105/002.inoutbcountpartopt=[^\w_](?P<refine>__inout_bcount_part_opt)[^\w_]
$SEC105/003.inoutbcountz=[^\w_](?P<refine>__inout_bcount_z)[^\w_]
$SEC105/002.inoutecount=[^\w_](?P<refine>__inout_ecount)[^\w_]
$SEC105/003.inoutecountfull=[^\w_](?P<refine>__inout_ecount_full)[^\w_]
$SEC105/003.inoutecountfullopt=[^\w_](?P<refine>__inout_ecount_full_opt)[^\w_]
$SEC105/002.inoutecountopt=[^\w_](?P<refine>__inout_ecount_opt)[^\w_]
$SEC105/002.inoutecountpart=[^\w_](?P<refine>__inout_ecount_part)[^\w_]
$SEC105/002.inoutecountpartopt=[^\w_](?P<refine>__inout_ecount_part_opt)[^\w_]
$SEC105/002.inoutecountz=[^\w_](?P<refine>__inout_ecount_z)[^\w_]
$SEC105/002.inoutopt=[^\w_](?P<refine>__inout_opt)[^\w_]
$SEC105/003.inoutxcount=[^\w_](?P<refine>__inout_xcount)[^\w_]
$SEC105/003.inoutxcountopt=[^\w_](?P<refine>__inout_xcount_opt)[^\w_]
$SEC105/002.inoutz=[^\w_](?P<refine>__inout_z)[^\w_]
$SEC105/003.internalkerneldriver=[^\w_](?P<refine>__internal_kernel_driver)[^\w_]
$SEC105/002.kerneldriver=[^\w_](?P<refine>__kernel_driver)[^\w_]
$SEC105/003.maybenull=[^\w_](?P<refine>__maybenull)[^\w_]
$SEC105/003.maybevalid=[^\w_](?P<refine>__maybevalid)[^\w_]
$SEC105/003.notnull=[^\w_](?P<refine>__notnull)[^\w_]
$SEC105/003.notvalid=[^\w_](?P<refine>__notvalid)[^\w_]
$SEC105/003.null=[^\w_](?P<refine>__null)[^\w_]
$SEC105/003.nullnullterminated=[^\w_](?P<refine>__nullnullterminated)[^\w_]
$SEC105/003.nullterminated=[^\w_](?P<refine>__nullterminated)[^\w_]
$SEC105/002.onfailure=[^\w_](?P<refine>__on_failure)[^\w_]
$SEC105/002.out=[^\w_](?P<refine>__out)[^\w_]
$SEC105/003.outawcount=[^\w_](?P<refine>__out_awcount)[^\w_]
$SEC105/002.outbcount=[^\w_](?P<refine>__out_bcount)[^\w_]
$SEC105/003.outbcountfull=[^\w_](?P<refine>__out_bcount_full)[^\w_]
$SEC105/003.outbcountfullopt=[^\w_](?P<refine>__out_bcount_full_opt)[^\w_]
$SEC105/002.outbcountopt=[^\w_](?P<refine>__out_bcount_opt)[^\w_]
$SEC105/002.outbcountpart=[^\w_](?P<refine>__out_bcount_part)[^\w_]
$SEC105/002.outbcountpartopt=[^\w_](?P<refine>__out_bcount_part_opt)[^\w_]
$SEC105/003.outbcountpartz=[^\w_](?P<refine>__out_bcount_part_z)[^\w_]
$SEC105/003.outbcountzopt=[^\w_](?P<refine>__out_bcount_z_opt)[^\w_]
$SEC105/002.outecount=[^\w_](?P<refine>__out_ecount)[^\w_]
$SEC105/003.outecountfull=[^\w_](?P<refine>__out_ecount_full)[^\w_]
$SEC105/003.outecountfullopt=[^\w_](?P<refine>__out_ecount_full_opt)[^\w_]
$SEC105/003.outecountfullz=[^\w_](?P<refine>__out_ecount_full_z)[^\w_]
$SEC105/002.outecountopt=[^\w_](?P<refine>__out_ecount_opt)[^\w_]
$SEC105/002.outecountpart=[^\w_](?P<refine>__out_ecount_part)[^\w_]
$SEC105/002.outecountpartopt=[^\w_](?P<refine>__out_ecount_part_opt)[^\w_]
$SEC105/003.outecountpartz=[^\w_](?P<refine>__out_ecount_part_z)[^\w_]
$SEC105/003.outecountpartzopt=[^\w_](?P<refine>__out_ecount_part_z_opt)[^\w_]
$SEC105/002.outecountz=[^\w_](?P<refine>__out_ecount_z)[^\w_]
$SEC105/002.outecountzopt=[^\w_](?P<refine>__out_ecount_z_opt)[^\w_]
$SEC105/002.outopt=[^\w_](?P<refine>__out_opt)[^\w_]
$SEC105/002.outrange=[^\w_](?P<refine>__out_range)[^\w_]
$SEC105/003.outvalidated=[^\w_](?P<refine>__out_validated)[^\w_]
$SEC105/003.outxcount=[^\w_](?P<refine>__out_xcount)[^\w_]
$SEC105/003.outxcountopt=[^\w_](?P<refine>__out_xcount_opt)[^\w_]
$SEC105/003.outxcountpartopt=[^\w_](?P<refine>__out_xcount_part_opt)[^\w_]
$SEC105/003.outz=[^\w_](?P<refine>__out_z)[^\w_]
$SEC105/003.outzopt=[^\w_](?P<refine>__out_z_opt)[^\w_]
$SEC105/001.possiblynotnullterminated=[^\w_](?P<refine>__possibly_notnullterminated)[^\w_]
$SEC105/003.post=[^\w_](?P<refine>__post)[^\w_]
$SEC105/003.postinvalid=[^\w_](?P<refine>__post_invalid)[^\w_]
$SEC105/002.postnullnullterminated=[^\w_](?P<refine>__post_nullnullterminated)[^\w_]
$SEC105/003.pre=[^\w_](?P<refine>__pre)[^\w_]
$SEC105/003.precond=[^\w_](?P<refine>__precond)[^\w_]
$SEC105/003.prefastoperatornewnull=[^\w_](?P<refine>__prefast_operator_new_null)[^\w_]
$SEC105/003.range=[^\w_](?P<refine>__range)[^\w_]
$SEC105/001.refparam=[^\w_](?P<refine>__refparam)[^\w_]
$SEC105/002.reserved=[^\w_](?P<refine>__reserved)[^\w_]
$SEC105/003.SALHFULLVER=[^\w_](?P<refine>__SAL_H_FULL_VER)[^\w_]
$SEC105/003.specstrings=[^\w_](?P<refine>__specstrings)[^\w_]
$SEC105/002.structbcount=[^\w_](?P<refine>__struct_bcount)[^\w_]
$SEC105/003.structxcount=[^\w_](?P<refine>__struct_xcount)[^\w_]
$SEC105/003.success=[^\w_](?P<refine>__success)[^\w_]
$SEC105/003.typefix=[^\w_](?P<refine>__typefix)[^\w_]
$SEC105/002.usercode=[^\w_](?P<refine>__user_code)[^\w_]
$SEC105/002.userdriver=[^\w_](?P<refine>__user_driver)[^\w_]
$SEC105/003.writableTo=[^\w_](?P<refine>__writableTo)[^\w_]
$SEC105/003.valid=[^\w_](?P<refine>__valid)[^\w_]
$SEC105/003.xcount=[^\w_](?P<refine>__xcount)[^\w_]
$SEC105/002.guardedby=[^\w_](?P<refine>__guarded_by)[^\w_]
$SEC105/002.writeguardedby=[^\w_](?P<refine>__write_guarded_by)[^\w_]
$SEC105/002.interlocked=[^\w_](?P<refine>__interlocked)[^\w_]
$SEC105/002.requireslockheld=[^\w_](?P<refine>__requires_lock_held)[^\w_]
$SEC105/002.requiresexclusivelockheld=[^\w_](?P<refine>__requires_exclusive_lock_held)[^\w_]
$SEC105/002.requiressharedlockheld=[^\w_](?P<refine>__requires_shared_lock_held)[^\w_]
$SEC105/002.requireslocknotheld=[^\w_](?P<refine>__requires_lock_not_held)[^\w_]
$SEC105/002.requiresnolocksheld=[^\w_](?P<refine>__requires_no_locks_held)[^\w_]
$SEC105/002.acquireslock=[^\w_](?P<refine>__acquires_lock)[^\w_]
$SEC105/002.acquiresexclusivelock=[^\w_](?P<refine>__acquires_exclusive_lock)[^\w_]
$SEC105/002.acquiressharedlock=[^\w_](?P<refine>__acquires_shared_lock)[^\w_]
$SEC105/002.releaseslock=[^\w_](?P<refine>__releases_lock)[^\w_]
$SEC105/002.releasesexclusivelock=[^\w_](?P<refine>__releases_exclusive_lock)[^\w_]
$SEC105/002.releasessharedlock=[^\w_](?P<refine>__releases_shared_lock)[^\w_]
$SEC105/002.haslockproperty=[^\w_](?P<refine>__has_lock_property)[^\w_]
$SEC105/002.declarelocklevel=[^\w_](?P<refine>__declare_lock_level)[^\w_]
$SEC105/002.haslocklevel=[^\w_](?P<refine>__has_lock_level)[^\w_]
$SEC105/003.internallocklevelorder=[^\w_](?P<refine>__internal_lock_level_order)[^\w_]
$SEC105/002.locklevelorder=[^\w_](?P<refine>__lock_level_order)[^\w_]
$SEC105/002.nocompetingthread=[^\w_](?P<refine>__no_competing_thread)[^\w_]
$SEC105/002.analysisassumelockacquired=[^\w_](?P<refine>__analysis_assume_lock_acquired)[^\w_]
$SEC105/002.analysisassumelockreleased=[^\w_](?P<refine>__analysis_assume_lock_released)[^\w_]
$SEC105/002.functionignorelockchecking=[^\w_](?P<refine>__function_ignore_lock_checking)[^\w_]
$SEC105/002.analysissuppresslockchecking=[^\w_](?P<refine>__analysis_suppress_lock_checking)[^\w_]
$SEC105/002.drvacquiresCancelSpinLock=[^\w_](?P<refine>__drv_acquiresCancelSpinLock)[^\w_]
$SEC105/002.drvreleasesCancelSpinLock=[^\w_](?P<refine>__drv_releasesCancelSpinLock)[^\w_]
$SEC105/002.drvmustHoldCancelSpinLock=[^\w_](?P<refine>__drv_mustHoldCancelSpinLock)[^\w_]
$SEC105/002.drvneverHoldCancelSpinLock=[^\w_](?P<refine>__drv_neverHoldCancelSpinLock)[^\w_]
$SEC105/002.drvacquiresCriticalRegion=[^\w_](?P<refine>__drv_acquiresCriticalRegion)[^\w_]
$SEC105/002.drvreleasesCriticalRegion=[^\w_](?P<refine>__drv_releasesCriticalRegion)[^\w_]
$SEC105/002.drvmustHoldCriticalRegion=[^\w_](?P<refine>__drv_mustHoldCriticalRegion)[^\w_]
$SEC105/002.drvneverHoldCriticalRegion=[^\w_](?P<refine>__drv_neverHoldCriticalRegion)[^\w_]
$SEC105/002.drvacquiresPriorityRegion=[^\w_](?P<refine>__drv_acquiresPriorityRegion)[^\w_]
$SEC105/002.drvreleasesPriorityRegion=[^\w_](?P<refine>__drv_releasesPriorityRegion)[^\w_]
$SEC105/002.drvmustHoldPriorityRegion=[^\w_](?P<refine>__drv_mustHoldPriorityRegion)[^\w_]
$SEC105/002.drvneverHoldPriorityRegion=[^\w_](?P<refine>__drv_neverHoldPriorityRegion)[^\w_]
$SEC105/002.drvinterlocked=[^\w_](?P<refine>__drv_interlocked)[^\w_]
$SEC105/003.drvacquiresResource=[^\w_](?P<refine>__drv_acquiresResource)[^\w_]
$SEC105/003.drvreleasesResource=[^\w_](?P<refine>__drv_releasesResource)[^\w_]
$SEC105/003.drvacquiresResourceGlobal=[^\w_](?P<refine>__drv_acquiresResourceGlobal)[^\w_]
$SEC105/003.drvreleasesResourceGlobal=[^\w_](?P<refine>__drv_releasesResourceGlobal)[^\w_]
$SEC105/003.drvmustHold=[^\w_](?P<refine>__drv_mustHold)[^\w_]
$SEC105/003.drvmustHoldGlobal=[^\w_](?P<refine>__drv_mustHoldGlobal)[^\w_]
$SEC105/003.drvneverHold=[^\w_](?P<refine>__drv_neverHold)[^\w_]
$SEC105/003.drvneverHoldGlobal=[^\w_](?P<refine>__drv_neverHoldGlobal)[^\w_]
$SEC105/003.drvacquiresExclusiveResource=[^\w_](?P<refine>__drv_acquiresExclusiveResource)[^\w_]
$SEC105/003.drvreleasesExclusiveResource=[^\w_](?P<refine>__drv_releasesExclusiveResource)[^\w_]
$SEC105/003.drvacquiresExclusiveResourceGlobal=[^\w_](?P<refine>__drv_acquiresExclusiveResourceGlobal)[^\w_]
$SEC105/003.drvreleasesExclusiveResourceGlobal=[^\w_](?P<refine>__drv_releasesExclusiveResourceGlobal)[^\w_]
$SEC105/002.drvat=[^\w_](?P<refine>__drv_at)[^\w_]
$SEC105/003.drvvalueIs=[^\w_](?P<refine>__drv_valueIs)[^\w_]
$SEC105/002.drvwhen=[^\w_](?P<refine>__drv_when)[^\w_]
$SEC105/002.drvsetsIRQL=[^\w_](?P<refine>__drv_setsIRQL)[^\w_]
$SEC105/002.drvraisesIRQL=[^\w_](?P<refine>__drv_raisesIRQL)[^\w_]
$SEC105/002.drvrequiresIRQL=[^\w_](?P<refine>__drv_requiresIRQL)[^\w_]
$SEC105/002.drvmaxIRQL=[^\w_](?P<refine>__drv_maxIRQL)[^\w_]
$SEC105/002.drvminIRQL=[^\w_](?P<refine>__drv_minIRQL)[^\w_]
$SEC105/002.drvsavesIRQL=[^\w_](?P<refine>__drv_savesIRQL)[^\w_]
$SEC105/002.drvsavesIRQLGlobal=[^\w_](?P<refine>__drv_savesIRQLGlobal)[^\w_]
$SEC105/002.drvrestoresIRQL=[^\w_](?P<refine>__drv_restoresIRQL)[^\w_]
$SEC105/002.drvrestoresIRQLGlobal=[^\w_](?P<refine>__drv_restoresIRQLGlobal)[^\w_]
$SEC105/002.drvminFunctionIRQL=[^\w_](?P<refine>__drv_minFunctionIRQL)[^\w_]
$SEC105/002.drvmaxFunctionIRQL=[^\w_](?P<refine>__drv_maxFunctionIRQL)[^\w_]
$SEC105/002.drvsameIRQL=[^\w_](?P<refine>__drv_sameIRQL)[^\w_]
$SEC105/002.drvuseCancelIRQL=[^\w_](?P<refine>__drv_useCancelIRQL)[^\w_]
$SEC105/002.drvisCancelIRQL=[^\w_](?P<refine>__drv_isCancelIRQL)[^\w_]
$SEC105/002.drvclearDoInit=[^\w_](?P<refine>__drv_clearDoInit)[^\w_]
$SEC105/002.drvIoGetDmaAdapter=[^\w_](?P<refine>__drv_IoGetDmaAdapter)[^\w_]
$SEC105/002.drvfloatSaved=[^\w_](?P<refine>__drv_floatSaved)[^\w_]
$SEC105/002.drvfloatRestored=[^\w_](?P<refine>__drv_floatRestored)[^\w_]
$SEC105/002.drvfloatUsed=[^\w_](?P<refine>__drv_floatUsed)[^\w_]
$SEC105/002.drvdispatchType=[^\w_](?P<refine>__drv_dispatchType)[^\w_]
$SEC105/002.drvfunctionClass=[^\w_](?P<refine>__drv_functionClass)[^\w_]
$SEC105/003.drvformatString=[^\w_](?P<refine>__drv_formatString)[^\w_]
$SEC105/003.drvderef=[^\w_](?P<refine>__drv_deref)[^\w_]
$SEC105/003.drvret=[^\w_](?P<refine>__drv_ret)[^\w_]
$SEC105/003.drvfun=[^\w_](?P<refine>__drv_fun)[^\w_]
$SEC105/003.drvoutderef=[^\w_](?P<refine>__drv_out_deref)[^\w_]
$SEC105/002.drvarg=[^\w_](?P<refine>__drv_arg)[^\w_]
$SEC105/002.drvconstant=[^\w_](?P<refine>__drv_constant)[^\w_]
$SEC105/002.drvnonConstant=[^\w_](?P<refine>__drv_nonConstant)[^\w_]
$SEC105/003.drvin=[^\w_](?P<refine>__drv_in)[^\w_]
$SEC105/002.drvisObjectPointer=[^\w_](?P<refine>__drv_isObjectPointer)[^\w_]
$SEC105/003.drvnotPointer=[^\w_](?P<refine>__drv_notPointer)[^\w_]
$SEC105/002.drvinTry=[^\w_](?P<refine>__drv_inTry)[^\w_]
$SEC105/003.drvModeimpl=[^\w_](?P<refine>__drv_Mode_impl)[^\w_]
$SEC105/003.drvstrictType=[^\w_](?P<refine>__drv_strictType)[^\w_]
$SEC105/003.drvstrictTypeMatch=[^\w_](?P<refine>__drv_strictTypeMatch)[^\w_]
$SEC105/003.drvtypeCond=[^\w_](?P<refine>__drv_typeCond)[^\w_]
$SEC105/003.drvtypeConst=[^\w_](?P<refine>__drv_typeConst)[^\w_]
$SEC105/003.drvtypeExpr=[^\w_](?P<refine>__drv_typeExpr)[^\w_]
$SEC105/002.Derefout=[^\w_](?P<refine>_Deref_out_)[^\w_]
$SEC105/002.Derefoptout=[^\w_](?P<refine>_Deref_opt_out_)[^\w_]
$SEC105/002.Derefoutopt=[^\w_](?P<refine>_Deref_out_opt_)[^\w_]
$SEC105/002.Derefoptoutopt=[^\w_](?P<refine>_Deref_opt_out_opt_)[^\w_]
$SEC105/003.Derefinoutzbytecapc=[^\w_](?P<refine>_Deref_inout_z_bytecap_c_)[^\w_]
$SEC105/003.Derefinoutzcapc=[^\w_](?P<refine>_Deref_inout_z_cap_c_)[^\w_]
$SEC105/003.Derefoutzbytecapc=[^\w_](?P<refine>_Deref_out_z_bytecap_c_)[^\w_]
$SEC105/003.Derefoutzcapc=[^\w_](?P<refine>_Deref_out_z_cap_c_)[^\w_]
$SEC105/003.Derefpostcap=[^\w_](?P<refine>_Deref_post_cap_)[^\w_]
$SEC105/003.Derefpostcount=[^\w_](?P<refine>_Deref_post_count_)[^\w_]
$SEC105/003.Derefpostcountc=[^\w_](?P<refine>_Deref_post_count_c_)[^\w_]
$SEC105/003.Derefpostoptbytecountc=[^\w_](?P<refine>_Deref_post_opt_bytecount_c_)[^\w_]
$SEC105/003.Derefpostoptbytecountx=[^\w_](?P<refine>_Deref_post_opt_bytecount_x_)[^\w_]
$SEC105/003.Derefpostoptcap=[^\w_](?P<refine>_Deref_post_opt_cap_)[^\w_]
$SEC105/003.Derefpostoptzcap=[^\w_](?P<refine>_Deref_post_opt_z_cap_)[^\w_]
$SEC105/003.Derefpostzcap=[^\w_](?P<refine>_Deref_post_z_cap_)[^\w_]
$SEC105/002.Inbytecount=[^\w_](?P<refine>_In_bytecount_)[^\w_]
$SEC105/002.Inbytecountc=[^\w_](?P<refine>_In_bytecount_c_)[^\w_]
$SEC105/003.Inbytecountx=[^\w_](?P<refine>_In_bytecount_x_)[^\w_]
$SEC105/002.Incount=[^\w_](?P<refine>_In_count_)[^\w_]
$SEC105/002.Incountc=[^\w_](?P<refine>_In_count_c_)[^\w_]
$SEC105/003.Incountx=[^\w_](?P<refine>_In_count_x_)[^\w_]
$SEC105/002.Inoptbytecount=[^\w_](?P<refine>_In_opt_bytecount_)[^\w_]
$SEC105/002.Inoptcount=[^\w_](?P<refine>_In_opt_count_)[^\w_]
$SEC105/002.Inoptcountc=[^\w_](?P<refine>_In_opt_count_c_)[^\w_]
$SEC105/002.Inoptzcount=[^\w_](?P<refine>_In_opt_z_count_)[^\w_]
$SEC105/002.Inptrdiffcount=[^\w_](?P<refine>_In_ptrdiff_count_)[^\w_]
$SEC105/002.Inzcount=[^\w_](?P<refine>_In_z_count_)[^\w_]
$SEC105/002.Inzcountc=[^\w_](?P<refine>_In_z_count_c_)[^\w_]
$SEC105/002.Inoutbytecap=[^\w_](?P<refine>_Inout_bytecap_)[^\w_]
$SEC105/003.Inoutbytecapx=[^\w_](?P<refine>_Inout_bytecap_x_)[^\w_]
$SEC105/002.Inoutcap=[^\w_](?P<refine>_Inout_cap_)[^\w_]
$SEC105/002.Inoutcapc=[^\w_](?P<refine>_Inout_cap_c_)[^\w_]
$SEC105/002.Inoutcount=[^\w_](?P<refine>_Inout_count_)[^\w_]
$SEC105/002.Inoutcountc=[^\w_](?P<refine>_Inout_count_c_)[^\w_]
$SEC105/002.Inoutoptbytecap=[^\w_](?P<refine>_Inout_opt_bytecap_)[^\w_]
$SEC105/002.Inoutoptcap=[^\w_](?P<refine>_Inout_opt_cap_)[^\w_]
$SEC105/002.Inoutoptcapc=[^\w_](?P<refine>_Inout_opt_cap_c_)[^\w_]
$SEC105/003.Inoutoptzbytecap=[^\w_](?P<refine>_Inout_opt_z_bytecap_)[^\w_]
$SEC105/003.Inoutzbytecap=[^\w_](?P<refine>_Inout_z_bytecap_)[^\w_]
$SEC105/002.Inoutzcap=[^\w_](?P<refine>_Inout_z_cap_)[^\w_]
$SEC105/002.Inoutzcapc=[^\w_](?P<refine>_Inout_z_cap_c_)[^\w_]
$SEC105/002.Outbytecap=[^\w_](?P<refine>_Out_bytecap_)[^\w_]
$SEC105/002.Outbytecapc=[^\w_](?P<refine>_Out_bytecap_c_)[^\w_]
$SEC105/002.Outbytecappostbytecount=[^\w_](?P<refine>_Out_bytecap_post_bytecount_)[^\w_]
$SEC105/003.Outbytecapx=[^\w_](?P<refine>_Out_bytecap_x_)[^\w_]
$SEC105/002.Outbytecapcount=[^\w_](?P<refine>_Out_bytecapcount_)[^\w_]
$SEC105/002.Outcap=[^\w_](?P<refine>_Out_cap_)[^\w_]
$SEC105/002.Outcapc=[^\w_](?P<refine>_Out_cap_c_)[^\w_]
$SEC105/003.Outcapm=[^\w_](?P<refine>_Out_cap_m_)[^\w_]
$SEC105/002.Outcappostcount=[^\w_](?P<refine>_Out_cap_post_count_)[^\w_]
$SEC105/003.Outcapx=[^\w_](?P<refine>_Out_cap_x_)[^\w_]
$SEC105/002.Outcapcount=[^\w_](?P<refine>_Out_capcount_)[^\w_]
$SEC105/003.Outcapcountx=[^\w_](?P<refine>_Out_capcount_x_)[^\w_]
$SEC105/002.Outoptbytecap=[^\w_](?P<refine>_Out_opt_bytecap_)[^\w_]
$SEC105/002.Outoptbytecappostbytecount=[^\w_](?P<refine>_Out_opt_bytecap_post_bytecount_)[^\w_]
$SEC105/002.Outoptbytecapcount=[^\w_](?P<refine>_Out_opt_bytecapcount_)[^\w_]
$SEC105/002.Outoptcap=[^\w_](?P<refine>_Out_opt_cap_)[^\w_]
$SEC105/002.Outoptcapc=[^\w_](?P<refine>_Out_opt_cap_c_)[^\w_]
$SEC105/003.Outoptcapx=[^\w_](?P<refine>_Out_opt_cap_x_)[^\w_]
$SEC105/002.Outoptcappostcount=[^\w_](?P<refine>_Out_opt_cap_post_count_)[^\w_]
$SEC105/002.Outoptcapcount=[^\w_](?P<refine>_Out_opt_capcount_)[^\w_]
$SEC105/003.Outoptzbytecap=[^\w_](?P<refine>_Out_opt_z_bytecap_)[^\w_]
$SEC105/003.Outoptzbytecapc=[^\w_](?P<refine>_Out_opt_z_bytecap_c_)[^\w_]
$SEC105/002.Outoptzcap=[^\w_](?P<refine>_Out_opt_z_cap_)[^\w_]
$SEC105/003.Outoptzcappostcount=[^\w_](?P<refine>_Out_opt_z_cap_post_count_)[^\w_]
$SEC105/003.Outzbytecap=[^\w_](?P<refine>_Out_z_bytecap_)[^\w_]
$SEC105/003.Outzbytecapc=[^\w_](?P<refine>_Out_z_bytecap_c_)[^\w_]
$SEC105/002.Outzcap=[^\w_](?P<refine>_Out_z_cap_)[^\w_]
$SEC105/002.Outzcapc=[^\w_](?P<refine>_Out_z_cap_c_)[^\w_]
$SEC105/003.Outzcappostcount=[^\w_](?P<refine>_Out_z_cap_post_count_)[^\w_]
$SEC105/003.Outzcapx=[^\w_](?P<refine>_Out_z_cap_x_)[^\w_]
$SEC105/003.Outzcapcount=[^\w_](?P<refine>_Out_z_capcount_)[^\w_]
$SEC105/002.Postbytecount=[^\w_](?P<refine>_Post_bytecount_)[^\w_]
$SEC105/002.Postbytecountc=[^\w_](?P<refine>_Post_bytecount_c_)[^\w_]
$SEC105/003.Postbytecountx=[^\w_](?P<refine>_Post_bytecount_x_)[^\w_]
$SEC105/002.Postcount=[^\w_](?P<refine>_Post_count_)[^\w_]
$SEC105/002.Postcountc=[^\w_](?P<refine>_Post_count_c_)[^\w_]
$SEC105/002.Postzcount=[^\w_](?P<refine>_Post_z_count_)[^\w_]
$SEC105/003.Precapfor=[^\w_](?P<refine>_Pre_cap_for_)[^\w_]
$SEC105/002.Precount=[^\w_](?P<refine>_Pre_count_)[^\w_]
$SEC105/003.Preoptbytecountx=[^\w_](?P<refine>_Pre_opt_bytecount_x_)[^\w_]
$SEC105/003.Prepostbytecountx=[^\w_](?P<refine>_Prepost_bytecount_x_)[^\w_]
$SEC105/003.Prepostcount=[^\w_](?P<refine>_Prepost_count_)[^\w_]
$SEC105/003.Prepostoptbytecountx=[^\w_](?P<refine>_Prepost_opt_bytecount_x_)[^\w_]
$SEC105/002.Retbytecap=[^\w_](?P<refine>_Ret_bytecap_)[^\w_]
$SEC105/002.Retcap=[^\w_](?P<refine>_Ret_cap_)[^\w_]
$SEC105/003.Retcountx=[^\w_](?P<refine>_Ret_count_x_)[^\w_]
$SEC105/002.Retoptbytecap=[^\w_](?P<refine>_Ret_opt_bytecap_)[^\w_]
$SEC105/003.Retoptbytecapx=[^\w_](?P<refine>_Ret_opt_bytecap_x_)[^\w_]
$SEC105/003.Retoptbytecountx=[^\w_](?P<refine>_Ret_opt_bytecount_x_)[^\w_]
$SEC105/002.Retoptcount=[^\w_](?P<refine>_Ret_opt_count_)[^\w_]
$SEC105/002.Retoptzcap=[^\w_](?P<refine>_Ret_opt_z_cap_)[^\w_]
$SEC105/002.SAPreAccessSARead=\[SA_Pre\(Access=SA_Read \)\]
$SEC105/002.SAPreAccessSAWrite=\[SA_Pre\(Access=SA_Write\)\]
$SEC105/002.SAPreDeref0NullSAMaybe=\[SA_Pre\( Deref=\(0\), Null=SA_Maybe \)\]
$SEC105/002.SAPreDeref0NullTerminatedSAYes=\[SA_Pre\( Deref=\(0\), NullTerminated=SA_Yes \)\]
$SEC105/002.SAPreDeref0NullTerminatedSAYes=\[SA_Pre\( Deref=0, NullTerminated=SA_Yes \)\]
$SEC105/002.SAPreDeref0ValidSANo=\[SA_Pre\(Deref=0, Valid=SA_No\)\]
$SEC105/002.SAPreDeref0ValidElements1=\[SA_Pre \(Deref=0, ValidElements="%1"\)\]
$SEC105/002.SAPreDeref0ValidElements1=\[SA_Pre\( Deref=\(0\), ValidElements = "%1" \)\]
$SEC105/002.SAPreDeref0ValidElementsConst1=\[SA_Pre\( Deref=\(0\), ValidElementsConst=\(%1\) \)\]
$SEC105/002.SAPreDeref0WritableBytes1=\[SA_Pre\(Deref=0, WritableBytes = "%1"\)\]
$SEC105/002.SAPreDeref0WritableElements1=\[SA_Pre\( Deref=\(0\), WritableElements = "%1" \)\]
$SEC105/002.SAPreDeref0WritableElementsConst1=\[SA_Pre\( Deref=\(0\), WritableElementsConst=\(%1\) \)\]
$SEC105/002.SAPreDeref1AccessSAWrite=\[SA_Pre\( Deref=1, Access=SA_Write \)\]
$SEC105/002.SAPreDeref1AccessSARead=\[SA_Pre\( Deref=1, Access=SA_Read \)\]
$SEC105/002.SAPreDeref1AccessSAReadWrite=\[SA_Pre\( Deref=1, Access=SA_ReadWrite \)\]
$SEC105/002.SAPreDeref1NullSAYes=\[SA_Pre\( Deref=\(1\), Null=SA_Yes \)\]
$SEC105/002.SAPreDeref1NullTerminatedSAYes=\[SA_Pre\( Deref=\(1\), NullTerminated=SA_Yes \)\]
$SEC105/002.SAPreDeref1ValidSAYes=\[SA_Pre\( Deref=\(1\), Valid=SA_Yes \)\]
$SEC105/002.SAPreDeref1ValidSANo=\[SA_Pre\( Deref=\(1\), Valid=SA_No \)\]
$SEC105/002.SAPreDeref1ValidSANo=\[SA_Pre\(Deref=1,Valid=SA_No\)\]
$SEC105/002.SAPreDeref1ValidSAYes=\[SA_Pre\(Deref=1, Valid=SA_Yes\)\]
$SEC105/002.SAPreDeref1NullSANo=\[SA_Pre\( Deref=\(1\), Null=SA_No \)\]
$SEC105/002.SAPreDeref1ValidSAYesAccessSARead=\[SA_Pre\(Deref=1,Valid=SA_Yes,Access=SA_Read\)\]
$SEC105/002.SAPreDeref1ValidBytesConst1=\[SA_Pre\(Deref=1, ValidBytesConst=%1\)\]
$SEC105/002.SAPreDeref1ValidElementsConst1=\[SA_Pre\(Deref=1, ValidElementsConst=%1\)\]
$SEC105/002.SAPreDeref1ValidElementsConst1ElementSizeConst2=\[SA_Pre\(Deref=1,ValidElementsConst=%1,ElementSizeConst=%2\)\]
$SEC105/002.SAPreDeref1WritableBytes1=\[SA_Pre\(Deref=1, WritableBytes = "%1"\)\]
$SEC105/002.SAPreDeref2ValidSANo=\[SA_Pre\(Deref=2,Valid=SA_No\)\]
$SEC105/002.SAPreNullSAYes=\[SA_Pre\(Null=SA_Yes\)\]
$SEC105/002.SAPreNullSANo=\[SA_Pre\(Null=SA_No\)\]
$SEC105/002.SAPreNullSANoNullTerminatedSAYesWritableElements1=\[SA_Pre\(Null=SA_No,NullTerminated=SA_Yes,WritableElements="%1"\)\]
$SEC105/002.SAPreNullSAMaybe=\[SA_Pre\(Null=SA_Maybe\)\]
$SEC105/002.SAPreNullSANoNotref1=\[SA_Pre\(Null=SA_No,Notref=1\)\]
$SEC105/002.SAPreNullSAYesValidSANo=\[SA_Pre\(Null=SA_Yes, Valid=SA_No\)\]
$SEC105/002.SAPreNullSANoValidSANo=\[SA_Pre\(Null=SA_No, Valid=SA_No\)\]
$SEC105/002.SAPreNullSAMaybeValidSANo=\[SA_Pre\(Null=SA_Maybe, Valid=SA_No\)\]
$SEC105/002.SAPreNullSAYesValidSAYes=\[SA_Pre\(Null=SA_Yes, Valid=SA_Yes\)\]
$SEC105/002.SAPreNullSAYesWritableBytesParam1=\[SA_Pre\(Null=SA_Yes,WritableBytesParam="%1"\)\]
$SEC105/002.SAPreNullSAYesSAPreWritableElementsParam1=\[SA_Pre\(Null=SA_Yes\),SA_Pre\(WritableElementsParam="%1"\)\]
$SEC105/002.SAPreValidElementsParam1ElementSizeParam2=\[SA_Pre\(ValidElementsParam="%1", ElementSizeParam="%2"\)\]
$SEC105/002.SAPreNullSANoWritableElements1=\[SA_Pre\(Null=SA_No,WritableElements="%1"\)\]
$SEC105/002.SAPreNullSANoWritableElementsConst1=\[SA_Pre\(Null=SA_No,WritableElementsConst=%1\)\]
$SEC105/002.SAPreNullTerminatedSAYes=\[SA_Pre\(NullTerminated=SA_Yes\)\]
$SEC105/002.SAPreNullTerminatedSAYesNullSAMaybe=\[SA_Pre\(NullTerminated=SA_Yes,Null=SA_Maybe\)\]
$SEC105/002.SAPreNullTerminatedSAYesValidSAYes=\[SA_Pre\(NullTerminated=SA_Yes, Valid=SA_Yes\)\]
$SEC105/002.SAPreNullTerminatedSANoNullSANoValidElementsConst1WritableElementsConst2=\[SA_Pre\(NullTerminated=SA_No, Null=SA_No, ValidElementsConst=%1, WritableElementsConst=%2\)\]
$SEC105/002.SAPreNullTerminatedSANoValidSAYes=\[SA_Pre\(NullTerminated=SA_No, Valid=SA_Yes\)\]
$SEC105/002.SAPreElementSizeConst1ValidElementsConst2=\[SA_Pre\(ElementSizeConst=%1, ValidElementsConst=%2\)\]
$SEC105/002.SAPreElementSizeConst1WritableElementsConst2=\[SA_Pre\(ElementSizeConst=%1, WritableElementsConst=%2\)\]
$SEC105/002.SAFormatStringStyleprintf=\[SA_FormatString\(Style="printf"\)\]
$SEC105/002.SAFormatStringStylescanf=\[SA_FormatString\( Style="scanf" \)\]
$SEC105/002.SAPreValidSAYes=\[SA_Pre\( Valid=SA_Yes \)\]
$SEC105/002.SAPreValidSAYesNullSANo=\[SA_Pre\(Valid=SA_Yes, Null=SA_No\)\]
$SEC105/002.SAPreValidSAYesNullSANoValidElementsParam1=\[SA_Pre\(Valid=SA_Yes, Null=SA_No, ValidElementsParam=%1\)\]
$SEC105/002.SAPreValidSAYesNullSANoWritableElements1=\[SA_Pre\(Valid=SA_Yes, Null=SA_No, WritableElements="%1"\)\]
$SEC105/002.SAPreValidBytesConst1=\[SA_Pre\( ValidBytesConst=%1 \)\]
$SEC105/002.SAPreValidBytesConst1Condition2=\[SA_Pre\( ValidBytesConst=%1, Condition="%2" \)\]
$SEC105/002.SAPreValidBytes1=\[SA_Pre \(ValidBytes="%1"\)\]
$SEC105/002.SAPreValidElements1=\[SA_Pre \(ValidElements="%1"\)\]
$SEC105/002.SAPreValidElementsLength1=\[SA_Pre \(ValidElementsLength="%1"\)\]
$SEC105/002.SAPreValidElementsConst1=\[SA_Pre\( ValidElementsConst=%1 \)\]
$SEC105/002.SAPreValidElementsConst1WritableElementsConst2NullSANo=\[SA_Pre\(ValidElementsConst=%1, WritableElementsConst=%2, Null=SA_No\)\]
$SEC105/002.SAPreWritableElementsConst1=\[SA_Pre\(WritableElementsConst =%1\)\]
$SEC105/002.SAPreWritableElementsConst1Notref1=\[SA_Pre\(WritableElementsConst=%1,Notref=1\)\]
$SEC105/002.SAPreWritableElementsConst1NullSANo=\[SA_Pre\(WritableElementsConst=%1, Null=SA_No\)\]
$SEC105/002.SAPreWritableBytes1=\[SA_Pre \(WritableBytes="%1"\)\]
$SEC105/002.SAPreWritableBytesConst1=\[SA_Pre\(WritableBytesConst=%1\)\]
$SEC105/002.SAPreWritableElements1=\[SA_Pre\(WritableElements="%1"\)\]
$SEC105/002.SAPreWritableElementsL1=\[SA_Pre\(WritableElements=L"%1"\)\]
$SEC105/002.SAPreWritableBytesLength1=\[SA_Pre \(WritableBytesLength="%1"\)\]
$SEC105/002.SAPreWritableElementsLength1=\[SA_Pre \(WritableElementsLength="%1"\)\]
$SEC105/002.SAPreAttributeValidSAYes=\[SA_PreAttribute\(Valid=SA_Yes\)\]
$SEC105/002.SAPreValidBytesConst1SAPostValidBytesConst2=\[SA_Pre\( ValidBytesConst=%1 \), SA_Post\( ValidBytesConst=%2 \)\]
$SEC105/002.SAPreValidBytes1SAPostElementSize2WritableElementsConst3=\[SA_Pre\(ValidBytes="%1"\), SA_Post\(ElementSize="%2", WritableElementsConst=%3\)\]
$SEC105/002.SAPreElementSize1WritableElementsConst2SAPostValidBytes3=\[SA_Pre\(ElementSize="%1", WritableElementsConst=%2\), SA_Post\(ValidBytes="%3"\)\]
$SEC105/002.SAPreWritableElements1SAPostValidElements2=\[SA_Pre\(WritableElements="%1"\), SA_Post\(ValidElements="%2"\)\]
$SEC105/002.SAPreNullMaybeSAPostValidElementsParam1=\[SA_Pre\(Null=Maybe\), SA_Post\(ValidElementsParam="%1"\)\]
$SEC105/002.SAPreTainted1=\[SA_Pre \(Tainted=%1\)\]
$SEC105/002.PreTaintedSAYesSANo=\[Pre\(Tainted=\(SA_Yes \| SA_No\)\)\]
$SEC105/002.SAPreDeref0NullTerminatedSANo=\[SA_Pre\( Deref=\(0\), NullTerminated=SA_No \)\]
$SEC105/002.SAPreDeref0NullTerminatedSAMaybe=\[SA_Pre\( Deref=\(0\), NullTerminated=SA_Maybe \)\]
$SEC105/002.SAPreDeref1NullTerminatedSANo=\[SA_Pre\( Deref=\(1\), NullTerminated=SA_No \)\]
$SEC105/002.SAPreDeref1NullTerminatedSAMaybe=\[SA_Pre\( Deref=\(1\), NullTerminated=SA_Maybe \)\]
$SEC105/002.SAPreNullTerminatedSAMaybeValidSAYes=\[SA_Pre\(NullTerminated=SA_Maybe, Valid=SA_Yes\)\]
$SEC105/002.SAPreNullTerminatedSANoSAPostNullTerminatedSANo=\[SA_Pre\(NullTerminated=SA_No\), SA_Post\(NullTerminated=SA_No\)\]
$SEC105/002.SAPreNullTerminatedSANONullSANo=\[SA_Pre\(NullTerminated=SA_NO, Null=SA_No\)\]
$SEC105/002.SAPreNullTerminatedSANONullSANoValidSAYes=\[SA_Pre\(NullTerminated=SA_NO, Null=SA_No, Valid=SA_Yes\)\]
$SEC105/003.SAPreNullTerminatedCOMINGNullSANo=\[SA_Pre\(NullTerminated=COMING, Null=SA_No\)\]
$SEC105/003.SAPreNullTerminatedCOMINGNullSANoValidSAYes=\[SA_Pre\(NullTerminated=COMING, Null=SA_No, Valid=SA_Yes\)\]
$SEC105/003.SAPreElementSizeConst1=\[SA_Pre\(ElementSizeConst=%1\)\]
$SEC105/002.SAPostAccessSAWrite=\[SA_Post \(Access=SA_Write\)\]
$SEC105/002.SAPostDeref0NullTerminatedSAYes=\[SA_Post\( Deref=\(0\), NullTerminated=SA_Yes \)\]
$SEC105/002.SAPostDeref0ValidSAYesNullTerminatedSAYes=\[SA_Post\( Deref=\(0\), Valid=SA_Yes, NullTerminated=SA_Yes \)\]
$SEC105/002.SAPostDeref0ValidSAYesNullTerminatedSANo=\[SA_Post\( Deref=\(0\), Valid=SA_Yes, NullTerminated=SA_No \)\]
$SEC105/002.SAPostDeref0ValidBytesConst1=\[SA_Post\( Deref=\(0\), ValidBytesConst=\(%1\) \)\]
$SEC105/002.SAPostDeref0ValidElements1=\[SA_Post\( Deref=\(0\), ValidElements = "%1" \)\]
$SEC105/002.SAPostDeref0ValidElementsConst1=\[SA_Post\( Deref=\(0\), ValidElementsConst=\(%1\) \)\]
$SEC105/002.SAPostDeref0WritableElements1=\[SA_Post\( Deref=\(0\), WritableElements = "%1" \)\]
$SEC105/002.SAPostDeref0WritableElementsConst1=\[SA_Post\( Deref=\(0\), WritableElementsConst=\(%1\) \)\]
$SEC105/002.SAPostDeref0WritableElementsConst1ElementSizeConst2=\[SA_Post\( Deref=\(0\), WritableElementsConst=\(%1\), ElementSizeConst=%2 \)\]
$SEC105/002.SAPostDeref1NullSANo=\[SA_Post\( Deref=\(1\), Null=SA_No \)\]
$SEC105/002.SAPostDeref1NullSANo=\[SA_Post\(Deref=1, Null=SA_No\)\]
$SEC105/002.SAPostDeref1NullTerminatedSAYes=\[SA_Post\( Deref=1, NullTerminated=SA_Yes \)\]
$SEC105/002.SAPostDeref1NullTerminatedSAYes=\[SA_Post\( Deref=\(1\), NullTerminated=SA_Yes \)\]
$SEC105/002.SAPostDeref1ValidSAYes=\[SA_Post\( Deref=\(1\), Valid=SA_Yes \)\]
$SEC105/002.SAPostDeref1ValidBytes1=\[SA_Post\( Deref=\(1\), ValidBytes = "%1" \)\]
$SEC105/002.SAPostDeref1WritableElements1=\[SA_Post\( Deref=\(1\), WritableElements = "%1" \)\]
$SEC105/002.SAPostDeref1WritableElements1ElementSizeConst2=\[SA_Post\( Deref=\(1\), WritableElements = "%1", ElementSizeConst = %2 \)\]
$SEC105/002.SAPostDeref1WritableElementsConst1=\[SA_Post\( Deref=\(1\), WritableElementsConst=\(%1\) \)\]
$SEC105/002.SAPostDeref1ValidSANo=\[SA_Post\(Deref=1, Valid=SA_No\)\]
$SEC105/002.SAPostDeref2ValidSANo=\[SA_Post\(Deref=2,Valid=SA_No\)\]
$SEC105/002.SAPostDeref2ValidSAYes=\[SA_Post\(Deref=2,Valid=SA_Yes\)\]
$SEC105/002.SAPostNullSAYes=\[SA_Post\(Null=SA_Yes\)\]
$SEC105/002.SAPostNullSANo=\[SA_Post\(Null=SA_No\)\]
$SEC105/002.SAPostValidSAYes=\[SA_Post\(Valid=SA_Yes\)\]
$SEC105/002.SAPostValidBytes1=\[SA_Post\(ValidBytes="%1"\)\]
$SEC105/002.SAPostValidBytesParam1=\[SA_Post\(ValidBytesParam="%1"\)\]
$SEC105/002.SAPostValidBytesLength1=\[SA_Post\(ValidBytesLength="%1"\)\]
$SEC105/002.SAPostValidElementsConst1=\[SA_Post\(ValidElementsConst=%1\)\]
$SEC105/002.SAPostValidElements1=\[SA_Post\( ValidElements="%1" \)\]
$SEC105/002.SAPostValidElementsLength1=\[SA_Post\(ValidElementsLength="%1"\)\]
$SEC105/002.SAPostWritableElementsParam1=\[SA_Post\(WritableElementsParam="%1"\)\]
$SEC105/002.SAPostValidBytesConst1=\[SA_Post\( ValidBytesConst=\(%1\) \)\]
$SEC105/002.SAPostValidBytesConst1Condition2=\[SA_Post\( ValidBytesConst=%1, Condition="%2" \)\]
$SEC105/002.SAPostDeref1ValidBytesConst1=\[SA_Post\( Deref=1, ValidBytesConst=\(%1\) \)\]
$SEC105/002.SAPostDeref1ValidElementsConst1=\[SA_Post\( Deref=\(1\), ValidElementsConst = "%1" \)\]
$SEC105/002.SAPostAttributeValidSAYes=\[SA_PostAttribute\(Valid=SA_Yes\)\]
$SEC105/002.SAPost1=\[SA_Post=1\]
$SEC105/002.SAPostNullSANoMyAttribute1=\[SA_Post\(Null=SA_No\), MyAttribute=1\]
$SEC105/002.PostNullSANoDeref1=\[Post\(Null=SA_No, Deref=1\)\]
$SEC105/002.PostNullSANoDeref2=\[Post\(Null=SA_No, Deref=2\)\]
$SEC105/002.vcattributesPostValidSAYes=\[vc_attributes::Post\(Valid=SA_Yes\)\]
$SEC105/002.vcattributesPostAttributeValidSAYes=\[vc_attributes::PostAttribute\(Valid=SA_Yes\)\]
$SEC105/002.vcattributesSAPostValidSAYes=\[vc_attributes::SA_Post\(Valid=SA_Yes\)\]
$SEC105/002.vcattributesSAPostAttributeValidSAYes=\[vc_attributes::SA_PostAttribute\(Valid=SA_Yes\)\]
$SEC105/002.SAPostDeref0NullTerminatedSANo=\[SA_Post\( Deref=\(0\), NullTerminated=SA_No \)\]
$SEC105/002.SAPostDeref0NullTerminatedSAMaybe=\[SA_Post\( Deref=\(0\), NullTerminated=SA_Maybe \)\]
$SEC105/002.SAPostDeref1NullTerminatedSANo=\[SA_Post\( Deref=\(1\), NullTerminated=SA_No \)\]
$SEC105/002.SAPostDeref1NullTerminatedSAMaybe=\[SA_Post\(Deref=1, NullTerminated=SA_Maybe\) \]
$SEC105/002.SAPostDeref0NullTerminatedSANo=\[SA_Post\( Deref=0, NullTerminated=SA_No \)\]
$SEC105/003.SAPostNeedsReleaseSAYes=\[SA_Post\(NeedsRelease=SA_Yes\)\]
$SEC105/003.SAPostValidSAUnchanged=\[SA_Post\(Valid=SA_Unchanged\)\]
$SEC105/003.SAPostPROPERTYvalue1value2=\[SA_Post\( PROPERTY=\(value1 \| value2\) \)\]
$SEC105/003.SAPostElementSizeParam1=\[SA_Post\(ElementSizeParam="%1"\)\]
$SEC105/001.Pre=\[Pre\(\)\]
$SEC105/001.Pre1=\[Pre\(1\)\]
$SEC105/001.PreAccessSAYes=\[Pre\(Access=SA_Yes\)\]
$SEC105/001.PreAccessSANo=\[Pre\(Access=SA_No\)\]
$SEC105/002.PreAccessSAReadWrite=\[Pre\(Access=SA_ReadWrite\)\]
$SEC105/002.PreAccessSAReadSAWrite=\[Pre\(Access=\(SA_Read \| SA_Write\)\)\]
$SEC105/002.PreAccessSAReadSANoAccess=\[Pre\(Access=SA_Read \| SA_NoAccess\)\]
$SEC105/002.PreAccessSAReadWriteSANoAccess=\[Pre\(Access=SA_ReadWrite \| SA_NoAccess\)\]
$SEC105/001.PreDeref0=\[Pre\( Deref=0 \)\]
$SEC105/002.PreDeref0AccessWrite=\[Pre\( Deref=0, Access=Write \)\]
$SEC105/001.PreDeref1=\[Pre\(Deref=1\)\]
$SEC105/002.PreDeref1AccessRead=\[Pre\(Deref=1, Access=Read\)\]
$SEC105/002.PreDeref1AccessRead=\[Pre\( Deref=1, Access=Read \)\]
$SEC105/002.PreDeref1AccessWrite=\[Pre\(Deref=1, Access=Write\)\]
$SEC105/002.PreDeref1AccessReadWrite=\[Pre\(Deref=1, Access=ReadWrite \)\]
$SEC105/002.PreDeref2AccessWrite=\[Pre\( Deref=2, Access=Write \)\]
$SEC105/002.PreDeref3AccessWrite=\[Pre\( Deref=3, Access=Write \)\]
$SEC105/002.PreDeref1NullSAYes=\[Pre\(Deref=1, Null=SA_Yes\)\]
$SEC105/002.PreDeref0ValidSAYes=\[Pre\(Deref=0, Valid=SA_Yes\)\]
$SEC105/002.PreDeref1ValidYes=\[Pre\( Deref=1, Valid=Yes \)\]
$SEC105/002.PreDeref2ValidSAYes=\[Pre\(Deref=2, Valid=SA_Yes\)\]
$SEC105/002.PreDeref3ValidSAYes=\[Pre\(Deref=3, Valid=SA_Yes\)\]
$SEC105/002.PreDeref4ValidSAYes=\[Pre\(Deref=4, Valid=SA_Yes\)\]
$SEC105/002.PreNullYesValidYes=\[Pre\(Null=Yes, Valid=Yes\)\]
$SEC105/002.PreNullYesValidNo=\[Pre\(Null=Yes, Valid=No\)\]
$SEC105/002.PreNullNo=\[Pre\(Null=No\)\]
$SEC105/002.PreNullNoValidNo=\[Pre\(Null=No, Valid=No\)\]
$SEC105/002.PreNullMaybeValidNo=\[Pre\(Null=Maybe, Valid=No\)\]
$SEC105/002.PreNullSAYesSAMaybe=\[Pre\(Null=\(SA_Yes \| SA_Maybe\)\)\]
$SEC105/002.PreNullYesNullNo=\[Pre\(Null=Yes, Null=No\)\]
$SEC105/001.PreNullTerminatedSARead=\[Pre\(NullTerminated=SA_Read\)\]
$SEC105/002.PreValidSANo=\[Pre\(Valid=SA_No\)\]
$SEC105/002.PreValidSAMaybe=\[Pre\(Valid=SA_Maybe\)\]
$SEC105/002.PreValidSAYesSAMaybe=\[Pre\(Valid=\(SA_Yes \| SA_Maybe\)\)\]
$SEC105/002.PreValidYes=\[Pre\(Valid=Yes\)\]
$SEC105/002.PreValidYesNullTerminatedYes=\[Pre\( Valid=Yes, NullTerminated=Yes \)\]
$SEC105/002.PreValidYesNullTerminatedNo=\[Pre\( Valid=Yes, NullTerminated=No \)\]
$SEC105/002.vcattributesPreValidSAYes=\[vc_attributes::Pre\(Valid=SA_Yes\)\]
$SEC105/002.vcattributesPreAttributeValidSAYes=\[vc_attributes::PreAttribute\(Valid=SA_Yes\)\]
$SEC105/002.vcattributesSAPreValidSAYes=\[vc_attributes::SA_Pre\(Valid=SA_Yes\)\]
$SEC105/002.vcattributesSAPreAttributeValidSAYes=\[vc_attributes::SA_PreAttribute\(Valid=SA_Yes\)\]
$SEC105/002.PreDeref1NullTerminatedSAMaybe=\[Pre\(Deref=1, NullTerminated=SA_Maybe\)\]
$SEC105/002.PreNullTerminatedSAYesSAMaybe=\[Pre\(NullTerminated=\(SA_Yes \| SA_Maybe\)\)\]
$SEC105/002.PreDeref1AccessWrite=\[Pre\( Deref=-1, Access=Write \)\]
$SEC105/003.PreDerefINTMINAccessWrite=\[Pre\( Deref=INT_MIN, Access=Write \)\]
$SEC105/002.PreDeref1ValidSAYes=\[Pre\(Deref=-1, Valid=SA_Yes\)\]
$SEC105/003.PreDerefderefAccess1=\[Pre\( Deref=deref, Access=%1 \)\]
$SEC105/003.PreDerefderefNull1=\[Pre\( Deref=deref, Null=%1 \)\]
$SEC105/003.PreDerefderefValidvalidValuePreDerefderefderefNNullnullValue=\[Pre\( Deref=deref, Valid=validValue \), Pre\( Deref=deref+derefN, Null=nullValue \)\]
$SEC105/003.PreNeedsRelease1=\[Pre\( NeedsRelease=%1 \)\]
$SEC105/003.PreValidSANoAccess=\[Pre\(Valid=SA_NoAccess\)\]
$SEC105/001.Post=\[Post\(\)\]
$SEC105/001.Post12=\[Post\(1,2\)\]
$SEC105/002.Post1NullYes=\[Post\(1, Null=Yes\)\]
$SEC105/002.PostAccessRead=\[Post\( Access=Read \)\]
$SEC105/002.PostAccessSAWriteSANoAccess=\[Post\(Access=SA_Write \| SA_NoAccess\)\]
$SEC105/001.PostDeref1=\[Post\( Deref=1 \)\]
$SEC105/001.PostDeref2=\[Post\( Deref=2 \)\]
$SEC105/002.PostDeref0AccessWrite=\[Post\( Deref=0, Access=Write \)\]
$SEC105/002.PostDeref1AccessWrite=\[Post\( Deref=1, Access=Write \)\]
$SEC105/002.PostDeref2AccessRead=\[Post\( Deref=2, Access=Read \)\]
$SEC105/002.PostDeref2AccessWrite=\[Post\( Deref=2, Access=Write \)\]
$SEC105/002.PostDeref3AccessWrite=\[Post\( Deref=3, Access=Write \)\]
$SEC105/002.PostDeref1ValidYes=\[Post\( Deref=1, Valid=Yes \)\]
$SEC105/002.PostNullYes=\[Post\(Null=Yes\)\]
$SEC105/002.PostNullYesNullNo=\[Post\(Null=Yes, Null=No\)\]
$SEC105/002.PostNullSAMaybe=\[Post\(Null=SA_Maybe\)\]
$SEC105/002.PostNullSAMaybeDeref1=\[Post\(Null=SA_Maybe, Deref=1\)\]
$SEC105/002.PostValidNo=\[Post\( Valid=No \)\]
$SEC105/002.PostValidSANo=\[Post\(Valid=SA_No\)\]
$SEC105/002.PostWritableBytes1=\[Post\(WritableBytes="%1"\)\]
$SEC105/002.PostWritableBytesConst1=\[Post\(WritableBytesConst=%1\)\]
$SEC105/002.PostWritableBytesConst1Deref1=\[Post\(WritableBytesConst=%1, Deref=1\)\]
$SEC105/002.PostDeref1WritableBytesConst1=\[Post\(Deref=1, WritableBytesConst=%1\)\]
$SEC105/002.PostWritableBytes1Deref1=\[Post\(WritableBytes="%1", Deref=1\)\]
$SEC105/002.PostValidBytesConst1Deref2=\[Post\(ValidBytesConst=%1, Deref=2\)\]
$SEC105/002.PostWritableElementsConst1=\[Post\(WritableElementsConst=%1\)\]
$SEC105/002.PostWritableElementsConst1Deref1=\[Post\(WritableElementsConst=%1, Deref=1\)\]
$SEC105/002.PostDeref1WritableElementsConst1=\[Post\(Deref=1, WritableElementsConst=%1\)\]
$SEC105/002.PostWritableElements1Deref1=\[Post\(WritableElements="%1", Deref=1\)\]
$SEC105/002.PostWritableElements1=\[Post\(WritableElements="%1"\)\]
$SEC105/002.PostDeref1ValidElementsConst1=\[Post\(Deref=1, ValidElementsConst=%1\)\]
$SEC105/002.PostDeref1Tainted1=\[Post\(Deref=1, Tainted=%1\)\]
$SEC105/002.PostValidSAMaybeDeref1=\[Post\(Valid=SA_Maybe, Deref=1\)\]
$SEC105/003.PostAccess1=\[Post\( Access=%1 \)\]
$SEC105/003.PostDeref1Access1=\[Post\( Deref=1, Access=%1 \)\]
$SEC105/003.PostDeref1NeedsRelease1=\[Post\( Deref=1, NeedsRelease=%1 \)\]
$SEC105/003.PostDeref1PROPERTY2=\[Post\(Deref=%1, PROPERTY=%2\)\]
$SEC105/003.PostDeref1PROPERTY2=\[Post\(Deref=%1, PROPERTY="%2"\)\]
$SEC105/003.PostDeref1Access2=\[Post\( Deref=%1, Access=%2 \)\]
$SEC105/003.PostDeref1Null2=\[Post\( Deref=%1, Null=%2 \)\]
$SEC105/003.PostDeref1property12=\[Post\(Deref=%1, property1=%2\)\]
$SEC105/003.PostDeref1property22=\[Post\(Deref=%1, property2=%2\)\]
$SEC105/003.PostDeref1Valid2=\[Post\( Deref=%1, Valid=%2 \)\]
$SEC105/003.PostNeedsRelease1=\[Post\( NeedsRelease=%1 \)\]
$SEC105/003.PostPROPERTY1=\[Post\(PROPERTY=%1\)\]
$SEC105/003.PostPROPERTY1=\[Post\(PROPERTY="%1"\)\]
$SEC105/003.PostPROPERTY1Deref2=\[Post\(PROPERTY="%1", Deref=%2\)\]
$SEC105/003.PostPROPERTY1Deref2=\[Post\(PROPERTY=%1, Deref=%2\)\]
$SEC105/002.returnvaluePostAccessSARead=\[returnvalue:Post\(Access=SA_Read\)\]
$SEC105/002.returnvaluePostAccessSAReadSARead=\[returnvalue:Post\(Access=\(SA_Read \| SA_Read\)\)\]
$SEC105/002.returnvaluePostNullSAYes=\[returnvalue:Post\(Null=SA_Yes\)\]
$SEC105/002.returnvaluePostNullSANoDeref0=\[returnvalue:Post\(Null=SA_No, Deref=0\)\]
$SEC105/002.returnvaluePostNullSANoDeref1=\[returnvalue:Post\(Null=SA_No, Deref=1\)\]
$SEC105/002.returnvaluePostNullSAMaybeDeref2=\[returnvalue:Post\(Null=SA_Maybe, Deref=2\)\]
$SEC105/002.returnvaluePostValidSAYes=\[returnvalue:Post\(Valid=SA_Yes\)\]
$SEC105/002.returnvaluePostWritableBytesConst1=\[returnvalue:Post\(WritableBytesConst=%1\)\]
$SEC105/002.returnvaluePostValidBytesConst1=\[returnvalue:Post\(ValidBytesConst=%1\)\]
$SEC105/002.returnvaluePostValidElementsConst1=\[returnvalue:Post\(ValidElementsConst=%1\)\]
$SEC105/002.returnvaluePostWritableElementsConst1=\[returnvalue:Post\(WritableElementsConst=%1\)\]
$SEC105/002.returnvaluePostNullTerminatedSANo=\[returnvalue:Post\(NullTerminated=SA_No\)\]
$SEC105/002.returnvaluePostDeref0returnvaluePostValidSAYes=\[returnvalue:Post\(Deref=0\), returnvalue:Post\(Valid=SA_Yes\)\]
$SEC105/002.returnvalueSAPostNullSAMaybe=\[returnvalue: SA_Post\(Null=SA_Maybe\)\]
$SEC105/002.returnvalueSAPostDeref0NullSAYes=\[returnvalue: SA_Post\( Deref=\(0\), Null=SA_Yes \)\]
$SEC105/002.returnvalueSAPostNullSAMaybeValidElements1=\[returnvalue: SA_Post\(Null=SA_Maybe, ValidElements=%1\)\]
$SEC105/002.returnvalueSAPostDeref1NullSAMaybe=\[returnvalue: SA_Post\( Deref=\(1\), Null=SA_Maybe \)\]
$SEC105/002.returnvalueSAPostDeref0NullSANo=\[returnvalue: SA_Post\( Deref=\(0\), Null=SA_No \)\]
$SEC105/002.returnvalueSAPostMustCheckSAYes=\[returnvalue: SA_Post\(MustCheck=SA_Yes\)\]
$SEC105/002.returnvaluePostAccessSAReadWrite=\[returnvalue:Post\(Access=SA_ReadWrite\)\]
$SEC105/002.returnvaluePostAccessSAReadWriteDeref1=\[returnvalue:Post\(Access=SA_ReadWrite, Deref=1\)\]
$SEC105/002.returnvaluePostAccessSAWrite=\[returnvalue:Post\(Access=SA_Write\)\]
$SEC105/002.returnvaluePostAccessSAReadWriteSARead=\[returnvalue:Post\(Access=\(SA_ReadWrite \| SA_Read\)\)\]
$SEC105/002.returnvaluePostValidSAMaybeDeref1=\[returnvalue:Post\(Valid=SA_Maybe, Deref=1\)\]
$SEC105/002.returnvalueSAPostDeref1NullSAYesNullTerminatedSANo=\[returnvalue: SA_Post\( Deref=\(1\), Null=SA_Yes, NullTerminated=SA_No \)\]
$SEC105/003.returnvaluePostAccessSAMaybe=\[returnvalue:Post\(Access=SA_Maybe\)\]
$SEC105/003.returnvaluePostAccessSANoAccess=\[returnvalue:Post\(Access=SA_NoAccess\)\]
$SEC105/003.returnvaluePostAccessSANoAccessSANoAccess=\[returnvalue:Post\(Access=\(SA_NoAccess \| SA_NoAccess\)\)\]
$SEC105/003.returnvaluePostDeref1ValidSAYes=\[returnvalue:Post\(Deref='%1', Valid=SA_Yes\)\]
