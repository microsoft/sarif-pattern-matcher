email@example.com
firstname.lastname@example.com //  Interesting side effect.  A letter preceding a period is considered a "word barrier" and this line produces three matches but our C# validator rejects the one starting with a period.
email@subdomain.example.com
firstname+lastname@example.com //  I haven't found any documentation which says that an email address may not start with a plus sign and indeed, our C# validator also accepts it, so this line produces three matches.
email@123.123.123.123
1234567890@example.com
email@example-one.com
_______@example.com
email@example.co.jp
firstname-lastname@example.com //  Same issues as + symbol, 3 matches
email@example.name //  Unusual top level domain
email@example.museum //  Unusual and long top level domain (5 characters)
//  We've so far tested the format of the email address itself.  Now examine the address's surroundings
 addressSurroundedBySpaces@fake.com 
	addressSurroundedByTabs@fake.com	
|addressSurroundedByPipes@fake.com|
"addressSurroundedByDoubleQuotes@fake.com"
'addressSurroundedBySingleQuotes@fake.com'
<a href="mailto:htmlAddress@fake.com"
<tag>addressInTags@fake.com</tag>
contact me at the following email:addressPrecededByColon@fake.com
contact me at the following email:addressPrecededByColonAndFollowedByPeriod@fake.com.  As I was saying...

//  Above are valid emails (True positives) (commenting below so that a valid email is preceded by the beginning of the file)

//  False positives.  
email@111.222.333.44444 //  This passes both the regex and the C# validator.  I think this is invalid because it's not a valid IP address while the previous example with numbers was.
email..email@example.com //  Consecutive periods pass regex as well as C# validator.  This is invalid by RFC.  We could only fix this with lookahead, not supported by our Regex Engine.
email@example..com //  Same as above
Abc..123@example.com // Same as above

//  The below are also valid emails, technically, according to the RFC, but are not supported by most systems
//  and so for now, we should expect they will not be matched
//  False negatives
email@[123.123.123.123] //  Brackets surrounding the domain name and top level domain
“email”@example.com //  Quotes surrounding the recipient name
much.“more\ unusual”@example.com
very.unusual.“@”.unusual.com@example.com //  Will create 3 partial matches, of which 2 are valid
very.“(),:;<>[]”.VERY.“very@\\ "very”.unusual@strange.example.com //  Will create a partial match

//  The below are explicitly invaild emails, practically as well as according to the RFC
//  True negatives
plainaddress
#@%^%#$@#$@#.com
@example.com
Joe Smith <email@example.com> //  Will create a partial match
email.example.com
email@example@example.com //  Will create a partial match
.email@example.com //  Will create a partial match
email.@example.com
あいうえお@example.com
email@example.com (Joe Smith) //  Will create a partial match
email@example
email@-example.com
sample@user@example.com //  Will create a partial match

//  This last line is to ensure that an email address is followed by the end of the file:
endOfLineCheck@fake.com