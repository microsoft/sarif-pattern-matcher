{
  "SharedStringsFileName": "Security.SharedStrings.txt",
  "Definitions": [
    {
      "Id": "SEC104/001",
      "Name": "UseSecureApi/Memory/Allocation",
      "Message": "'{0:scanTarget}' contains a call to '{1:id}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_alloca",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_alloca))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_malloca'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_alloca' with '_malloca'.",
              "Find": "_alloca",
              "ReplaceWith": "_malloca"
            }
          }
        },
        {
          "SubId": "alloca",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>alloca))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_malloca'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'alloca' for '_malloca'.",
              "Find": "alloca",
              "ReplaceWith": "_malloca"
            }
          }
        },
        {
          "SubId": "_malloca",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_malloca))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_alloca', 'alloca'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/002",
      "Name": "UseSecureApi/String/Input",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_getts",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_getts))\\s*\\(",
          "MessageArguments": {
            "alternative": "'gets_s', 'StringCbGets', 'StringCbGetsEx', 'StringCchGets', 'StringCchGetsEx'"
          }
        },
        {
          "SubId": "_gettws",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_gettws))\\s*\\(",
          "MessageArguments": {
            "alternative": "'gets_s'"
          }
        },
        {
          "SubId": "_getws",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_getws))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbGets', 'StringCbGetsEx', 'StringCchGets', 'StringCchGetsEx'"
          }
        },
        {
          "SubId": "gets",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>gets))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fgets', 'gets_s', 'StringCbGets', 'StringCbGetsEx', 'StringCchGets', 'StringCchGetsEx'"
          }
        },
        {
          "SubId": "fgets",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fgets))\\s*\\(",
          "MessageArguments": {
            "alternative": "'gets'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "gets_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>gets_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_getts', '_gettws', 'gets'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbGets",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbGets))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_getts', '_getws', 'gets'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbGetsEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbGetsEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_getts', '_getws', 'gets'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchGets",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchGets))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_getts', '_getws', 'gets'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchGetsEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchGetsEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_getts', '_getws', 'gets'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/003",
      "Name": "UseSecureApi/String/Conversion",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_i64toa",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_i64toa))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_i64toa_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_i64toa' with '_i64toa_s'.",
              "Find": "_i64toa",
              "ReplaceWith": "_i64toa_s"
            }
          }
        },
        {
          "SubId": "_i64tow",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_i64tow))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_i64tow_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_i64tow' with '_i64tow_s'.",
              "Find": "_i64tow",
              "ReplaceWith": "_i64tow_s"
            }
          }
        },
        {
          "SubId": "_itoa",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_itoa))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_itoa_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_itoa' with '_itoa_s'.",
              "Find": "_itoa",
              "ReplaceWith": "_itoa_s"
            }
          }
        },
        {
          "SubId": "_itow",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_itow))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_itow_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_itow' with '_itow_s'.",
              "Find": "_itow",
              "ReplaceWith": "_itow_s"
            }
          }
        },
        {
          "SubId": "_ui64toa",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_ui64toa))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_ui64toa_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_ui64toa' with '_ui64toa_s'.",
              "Find": "_ui64toa",
              "ReplaceWith": "_ui64toa_s"
            }
          }
        },
        {
          "SubId": "_ui64tow",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_ui64tow))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_ui64tow_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_ui64tow' with '_ui64tow_s'.",
              "Find": "_ui64tow",
              "ReplaceWith": "_ui64tow_s"
            }
          }
        },
        {
          "SubId": "_ultoa",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_ultoa))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_ultoa_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_ultoa' with '_ultoa_s'.",
              "Find": "_ultoa",
              "ReplaceWith": "_ultoa_s"
            }
          }
        },
        {
          "SubId": "_ultow",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_ultow))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_ultow_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_ultow' with '_ultow_s'.",
              "Find": "_ultow",
              "ReplaceWith": "_ultow_s"
            }
          }
        },
        {
          "SubId": "atof",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>atof))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strtod'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'atof' with 'strtod'.",
              "Find": "atof",
              "ReplaceWith": "strtod"
            }
          }
        },
        {
          "SubId": "atoi",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>atoi))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strtol'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'atoi' with 'strtol'.",
              "Find": "atoi",
              "ReplaceWith": "strtol"
            }
          }
        },
        {
          "SubId": "atoll",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>atoll))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strtoll'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'atoll' with 'strtoll'.",
              "Find": "atoll",
              "ReplaceWith": "strtoll"
            }
          }
        },
        {
          "SubId": "mbsrtowcs",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>mbsrtowcs))\\s*\\(",
          "MessageArguments": {
            "alternative": "'mbsrtowcs_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'mbsrtowcs' with 'mbsrtowcs_s'.",
              "Find": "mbsrtowcs",
              "ReplaceWith": "mbsrtowcs_s"
            }
          }
        },
        {
          "SubId": "mbstowcs",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>mbstowcs))\\s*\\(",
          "MessageArguments": {
            "alternative": "'mbstowcs_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'mbstowcs' with 'mbstowcs_s'.",
              "Find": "mbstowcs",
              "ReplaceWith": "mbstowcs_s"
            }
          }
        },
        {
          "SubId": "wcrtomb",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcrtomb))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcrtomb_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wcrtomb' with 'wcrtomb_s'.",
              "Find": "wcrtomb",
              "ReplaceWith": "wcrtomb_s"
            }
          }
        },
        {
          "SubId": "wcrtombs",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcrtombs))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcrtombs_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wcrtombs' with 'wcrtombs_s'.",
              "Find": "wcrtombs",
              "ReplaceWith": "wcrtombs_s"
            }
          }
        },
        {
          "SubId": "wcsrtombs",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcsrtombs))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcsrtombs_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wcsrtombs' with 'wcsrtombs_s'.",
              "Find": "wcsrtombs",
              "ReplaceWith": "wcsrtombs_s"
            }
          }
        },
        {
          "SubId": "wctomb",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wctomb))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wctomb_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wctomb' with 'wctomb_s'.",
              "Find": "wctomb",
              "ReplaceWith": "wctomb_s"
            }
          }
        },
        {
          "SubId": "_i64toa_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_i64toa_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_i64toa'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_i64tow_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_i64tow_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_i64tow'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_itoa_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_itoa_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_itoa'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_itow_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_itow_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_itow'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_ui64toa_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_ui64toa_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_ui64toa'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_ui64tow_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_ui64tow_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_ui64tow'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_ultoa_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_ultoa_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_ultoa'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_ultow_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_ultow_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_ultow'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "mbsrtowcs_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>mbsrtowcs_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'mbsrtowcs'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "mbstowcs_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>mbstowcs_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'mbstowcs'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strtod",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strtod))\\s*\\(",
          "MessageArguments": {
            "alternative": "'atof'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strtol",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strtol))\\s*\\(",
          "MessageArguments": {
            "alternative": "'atoi'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strtoll",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strtoll))\\s*\\(",
          "MessageArguments": {
            "alternative": "'atoll'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcrtomb_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcrtomb_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcrtomb'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcrtombs_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcrtombs_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcrtombs'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcsrtombs_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcsrtombs_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcsrtombs'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wctomb_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wctomb_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wctomb'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/004",
      "Name": "UseSecureApi/Path/Manipulation",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_makepath",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_makepath))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_makepath_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_makepath' with '_makepath_s'.",
              "Find": "_makepath",
              "ReplaceWith": "_makepath_s"
            }
          }
        },
        {
          "SubId": "_splitpath",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_splitpath))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_splitpath_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_splitpath' with '_splitpath_s'.",
              "Find": "_splitpath",
              "ReplaceWith": "_splitpath_s"
            }
          }
        },
        {
          "SubId": "_wmakepath",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_wmakepath))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_wmakepath_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_wmakepath' with '_wmakepath_s'.",
              "Find": "_wmakepath",
              "ReplaceWith": "_wmakepath_s"
            }
          }
        },
        {
          "SubId": "_wsplitpath",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_wsplitpath))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_wsplitpath_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_wsplitpath' with '_wsplitpath_s'.",
              "Find": "_wsplitpath",
              "ReplaceWith": "_wsplitpath_s"
            }
          }
        },
        {
          "SubId": "getwd",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>getwd))\\s*\\(",
          "MessageArguments": {
            "alternative": "'getcwd'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'getwd' with 'getcwd'.",
              "Find": "getwd",
              "ReplaceWith": "getcwd"
            }
          }
        },
        {
          "SubId": "makepath",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>makepath))\\s*\\(",
          "MessageArguments": {
            "alternative": "'makepath_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'makepath' with 'makepath_s'.",
              "Find": "makepath",
              "ReplaceWith": "makepath_s"
            }
          }
        },
        {
          "SubId": "_makepath_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_makepath_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_makepath'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_splitpath_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_splitpath_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_splitpath'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_wmakepath_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_wmakepath_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_wmakepath'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_wsplitpath_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_wsplitpath_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_wsplitpath'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "getcwd",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>getcwd))\\s*\\(",
          "MessageArguments": {
            "alternative": "'getwd'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "makepath_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>makepath_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'makepath'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/005",
      "Name": "UseSecureApi/String/Copy",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_mbccpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbccpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbccpy_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbccpy' with '_mbccpy_s'.",
              "Find": "_mbccpy",
              "ReplaceWith": "_mbccpy_s"
            }
          }
        },
        {
          "SubId": "_mbscpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbscpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbscpy_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbscpy' with '_mbscpy_s'.",
              "Find": "_mbscpy",
              "ReplaceWith": "_mbscpy_s"
            }
          }
        },
        {
          "SubId": "_mbsnbcpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsnbcpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsnbcpy_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbsnbcpy' with '_mbsnbcpy_s'.",
              "Find": "_mbsnbcpy",
              "ReplaceWith": "_mbsnbcpy_s"
            }
          }
        },
        {
          "SubId": "_mbsncpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsncpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsncpy_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbsncpy' with '_mbsncpy_s'.",
              "Find": "_mbsncpy",
              "ReplaceWith": "_mbsncpy_s"
            }
          }
        },
        {
          "SubId": "_tcscpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_tcscpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCopy', 'StringCbCopyEx', 'StringCchCopy', 'StringCchCopyEx'"
          }
        },
        {
          "SubId": "_tcsncpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_tcsncpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCopyN', 'StringCbCopyNEx', 'StringCchCopyN', 'StringCchCopyNEx'"
          }
        },
        {
          "SubId": "lstrcpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrcpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCopy', 'StringCbCopyEx', 'StringCchCopy', 'StringCchCopyEx'"
          }
        },
        {
          "SubId": "lstrcpyA",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrcpyA))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCchCopy'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'lstrcpyA' with 'StringCchCopy'.",
              "Find": "lstrcpyA",
              "ReplaceWith": "StringCchCopy"
            }
          }
        },
        {
          "SubId": "lstrcpynA",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrcpynA))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCchCopy'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'lstrcpynA' with 'StringCchCopy'.",
              "Find": "lstrcpynA",
              "ReplaceWith": "StringCchCopy"
            }
          }
        },
        {
          "SubId": "lstrcpynW",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrcpynW))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCchCopy'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'lstrcpynW' with 'StringCchCopy'.",
              "Find": "lstrcpynW",
              "ReplaceWith": "StringCchCopy"
            }
          }
        },
        {
          "SubId": "lstrcpyW",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrcpyW))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCchCopy'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'lstrcpyW' with 'StringCchCopy'.",
              "Find": "lstrcpyW",
              "ReplaceWith": "StringCchCopy"
            }
          }
        },
        {
          "SubId": "strcpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strcpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strcpy_s', 'StringCbCopy', 'StringCbCopyEx', 'StringCchCopy', 'StringCchCopyEx', 'strlcpy'"
          }
        },
        {
          "SubId": "StrCpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StrCpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCopy', 'StringCbCopyEx', 'StringCchCopy', 'StringCchCopyEx'"
          }
        },
        {
          "SubId": "strncpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strncpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCopyN', 'StringCbCopyNEx', 'StringCchCopyN', 'StringCchCopyNEx', 'strlcpy', 'strncpy_s'"
          }
        },
        {
          "SubId": "wcscpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcscpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCopy', 'StringCbCopyEx', 'StringCchCopy', 'StringCchCopyEx', 'wcscpy_s', 'wcslcpy'"
          }
        },
        {
          "SubId": "wcsncpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcsncpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCopyN', 'StringCbCopyNEx', 'StringCchCopyN', 'StringCchCopyNEx', 'wcslcpy', 'wcsncpy_s'"
          }
        },
        {
          "SubId": "_mbccpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbccpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbccpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_mbscpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbscpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbscpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_mbsnbcpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsnbcpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsnbcpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_mbsncpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsncpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsncpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strcpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strcpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strcpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbCopy",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbCopy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcscpy', 'lstrcpy', 'strcpy', 'StrCpy', 'wcscpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbCopyEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbCopyEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcscpy', 'lstrcpy', 'strcpy', 'StrCpy', 'wcscpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbCopyN",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbCopyN))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcsncpy', 'strncpy', 'wcsncpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbCopyNEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbCopyNEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcsncpy', 'strncpy', 'wcsncpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchCopy",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchCopy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcscpy', 'lstrcpy', 'lstrcpyA', 'lstrcpynA', 'lstrcpynW', 'lstrcpyW', 'strcpy', 'StrCpy', 'wcscpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchCopyEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchCopyEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcscpy', 'lstrcpy', 'strcpy', 'StrCpy', 'wcscpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchCopyN",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchCopyN))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcsncpy', 'strncpy', 'wcsncpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchCopyNEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchCopyNEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcsncpy', 'strncpy', 'wcsncpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strlcpy",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strlcpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strcpy', 'strncpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strncpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strncpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strncpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcscpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcscpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcscpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcslcpy",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcslcpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcscpy', 'wcsncpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcsncpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcsncpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcsncpy'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/006",
      "Name": "UseSecureApi/String/Concatenation",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_mbscat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbscat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbscat_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbscat' with '_mbscat_s'.",
              "Find": "_mbscat",
              "ReplaceWith": "_mbscat_s"
            }
          }
        },
        {
          "SubId": "_mbsnbcat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsnbcat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsnbcat_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbsnbcat' with '_mbsnbcat_s'.",
              "Find": "_mbsnbcat",
              "ReplaceWith": "_mbsnbcat_s"
            }
          }
        },
        {
          "SubId": "_mbsncat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsncat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsncat_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbsncat' with '_mbsncat_s'.",
              "Find": "_mbsncat",
              "ReplaceWith": "_mbsncat_s"
            }
          }
        },
        {
          "SubId": "_tcscat",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_tcscat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCat', 'StringCbCatEx', 'StringCchCat', 'StringCchCatEx'"
          }
        },
        {
          "SubId": "lstrcat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrcat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCat', 'StringCbCatEx', 'StringCchCat', 'StringCchCatEx'"
          }
        },
        {
          "SubId": "lstrcatA",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrcatA))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCchCat'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'lstrcatA' with 'StringCchCat'.",
              "Find": "lstrcatA",
              "ReplaceWith": "StringCchCat"
            }
          }
        },
        {
          "SubId": "lstrcatW",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrcatW))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCchCat'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'lstrcatW' with 'StringCchCat'.",
              "Find": "lstrcatW",
              "ReplaceWith": "StringCchCat"
            }
          }
        },
        {
          "SubId": "lstrncat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>lstrncat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strcat_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'lstrncat' with 'strcat_s'.",
              "Find": "lstrncat",
              "ReplaceWith": "strcat_s"
            }
          }
        },
        {
          "SubId": "strcat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strcat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strcat_s', 'StringCbCat', 'StringCbCatEx', 'StringCchCat', 'StringCchCatEx', 'strlcat', 'strncat_s'"
          }
        },
        {
          "SubId": "StrCat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StrCat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCat', 'StringCbCatEx', 'StringCchCat', 'StringCchCatEx'"
          }
        },
        {
          "SubId": "StrCatBuff",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StrCatBuff))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCat', 'StringCbCatEx', 'StringCchCat', 'StringCchCatEx'"
          }
        },
        {
          "SubId": "wcscat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcscat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCat', 'StringCbCatEx', 'StringCchCat', 'StringCchCatEx', 'wcscat_s', 'wcslcat'"
          }
        },
        {
          "SubId": "wcsncat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcsncat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcslcat', 'wcsncat_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wcsncat' with 'wcsncat_s'.",
              "Find": "wcsncat",
              "ReplaceWith": "wcsncat_s"
            }
          }
        },
        {
          "SubId": "_mbscat_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbscat_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbscat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_mbsnbcat_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsnbcat_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsnbcat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_mbsncat_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsncat_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsncat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strcat_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strcat_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'lstrncat', 'strcat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbCat",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbCat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcscat', 'lstrcat', 'strcat', 'StrCat', 'StrCatBuff', 'wcscat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbCatEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbCatEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcscat', 'lstrcat', 'strcat', 'StrCat', 'StrCatBuff', 'wcscat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchCat",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchCat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcscat', 'lstrcat', 'lstrcatA', 'lstrcatW', 'strcat', 'StrCat', 'StrCatBuff', 'wcscat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchCatEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchCatEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcscat', 'lstrcat', 'strcat', 'StrCat', 'StrCatBuff', 'wcscat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strlcat",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strlcat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strcat', 'strncat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strncat_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strncat_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strcat', 'strncat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcscat_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcscat_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcscat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcslcat",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcslcat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcscat', 'wcsncat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcsncat_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcsncat_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcsncat'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/007",
      "Name": "UseSecureApi/String/Length",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_mbslen",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbslen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbsnlen'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbslen' with '_mbsnlen'.",
              "Find": "_mbslen",
              "ReplaceWith": "_mbsnlen"
            }
          }
        },
        {
          "SubId": "_mbstrlen",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbstrlen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbstrnlen'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbstrlen' with '_mbstrnlen'.",
              "Find": "_mbstrlen",
              "ReplaceWith": "_mbstrnlen"
            }
          }
        },
        {
          "SubId": "_tcslen",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_tcslen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbLength', 'StringCchLength', 'UnalignedStringCbLength', 'UnalignedStringCchLength'"
          }
        },
        {
          "SubId": "strlen",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strlen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbLength', 'StringCchLength', 'strlen_s', 'UnalignedStringCbLength', 'UnalignedStringCchLength'"
          }
        },
        {
          "SubId": "strncat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strncat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCatN', 'StringCbCatNEx', 'StringCchCatN', 'StringCchCatNEx', 'strlcat', 'strncat_s'"
          }
        },
        {
          "SubId": "StrNCat",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StrNCat))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbCatN', 'StringCbCatNEx', 'StringCchCatN', 'StringCchCatNEx'"
          }
        },
        {
          "SubId": "wcslen",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcslen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbLength', 'StringCchLength', 'UnalignedStringCbLength', 'UnalignedStringCchLength', 'wcslen_s'"
          }
        },
        {
          "SubId": "_mbsnlen",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbsnlen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbslen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_mbstrnlen",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbstrnlen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbstrlen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbCatN",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbCatN))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strncat', 'StrNCat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbCatNEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbCatNEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strncat', 'StrNCat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbLength",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbLength))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcslen', 'strlen', 'wcslen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchCatN",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchCatN))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strncat', 'StrNCat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchCatNEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchCatNEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strncat', 'StrNCat'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchLength",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchLength))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcslen', 'strlen', 'wcslen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strlen_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strlen_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strlen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "UnalignedStringCbLength",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>UnalignedStringCbLength))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcslen', 'strlen', 'wcslen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "UnalignedStringCchLength",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>UnalignedStringCchLength))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_tcslen', 'strlen', 'wcslen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcslen_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcslen_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcslen'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/008",
      "Name": "UseSecureApi/String/Parsing",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_mbstok",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbstok))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbstok_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace '_mbstok' with '_mbstok_s'.",
              "Find": "_mbstok",
              "ReplaceWith": "_mbstok_s"
            }
          }
        },
        {
          "SubId": "fscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'fscanf' with 'fscanf_s'.",
              "Find": "fscanf",
              "ReplaceWith": "fscanf_s"
            }
          }
        },
        {
          "SubId": "fwscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fwscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fwscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'fwscanf' with 'fwscanf_s'.",
              "Find": "fwscanf",
              "ReplaceWith": "fwscanf_s"
            }
          }
        },
        {
          "SubId": "scanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>scanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'scanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'scanf' with 'scanf_s'.",
              "Find": "scanf",
              "ReplaceWith": "scanf_s"
            }
          }
        },
        {
          "SubId": "sscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>sscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'sscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'sscanf' with 'sscanf_s'.",
              "Find": "sscanf",
              "ReplaceWith": "sscanf_s"
            }
          }
        },
        {
          "SubId": "strtok",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strtok))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strsep', 'strtok_r', 'strtok_s'"
          }
        },
        {
          "SubId": "swscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>swscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'swscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'swscanf' with 'swscanf_s'.",
              "Find": "swscanf",
              "ReplaceWith": "swscanf_s"
            }
          }
        },
        {
          "SubId": "vfscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vfscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vfscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vfscanf' with 'vfscanf_s'.",
              "Find": "vfscanf",
              "ReplaceWith": "vfscanf_s"
            }
          }
        },
        {
          "SubId": "vfwscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vfwscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vfwscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vfwscanf' with 'vfwscanf_s'.",
              "Find": "vfwscanf",
              "ReplaceWith": "vfwscanf_s"
            }
          }
        },
        {
          "SubId": "vscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vscanf' with 'vscanf_s'.",
              "Find": "vscanf",
              "ReplaceWith": "vscanf_s"
            }
          }
        },
        {
          "SubId": "vsscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vsscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vsscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vsscanf' with 'vsscanf_s'.",
              "Find": "vsscanf",
              "ReplaceWith": "vsscanf_s"
            }
          }
        },
        {
          "SubId": "vswscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vswscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vswscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vswscanf' with 'vswscanf_s'.",
              "Find": "vswscanf",
              "ReplaceWith": "vswscanf_s"
            }
          }
        },
        {
          "SubId": "vwscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vwscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vwscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vwscanf' with 'vwscanf_s'.",
              "Find": "vwscanf",
              "ReplaceWith": "vwscanf_s"
            }
          }
        },
        {
          "SubId": "wcstok",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcstok))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcstok_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wcstok' with 'wcstok_s'.",
              "Find": "wcstok",
              "ReplaceWith": "wcstok_s"
            }
          }
        },
        {
          "SubId": "wscanf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wscanf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wscanf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wscanf' with 'wscanf_s'.",
              "Find": "wscanf",
              "ReplaceWith": "wscanf_s"
            }
          }
        },
        {
          "SubId": "_mbstok_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_mbstok_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_mbstok'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "fscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "fwscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fwscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fwscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "scanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>scanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'scanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "sscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>sscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'sscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strsep",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strsep))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strtok'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strtok_r",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strtok_r))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strtok'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strtok_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strtok_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strtok'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "swscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>swscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'swscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vfscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vfscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vfscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vfwscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vfwscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vfwscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vsscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vsscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vsscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vswscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vswscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vswscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vwscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vwscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vwscanf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wcstok_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wcstok_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wcstok'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wscanf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wscanf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wscanf'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/009",
      "Name": "UseSecureApi/String/Formatting",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "_snprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_snprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbPrintf', 'StringCbPrintf_l', 'StringCbPrintf_lEx', 'StringCbPrintfEx', 'StringCchPrintf', 'StringCchPrintfEx'"
          }
        },
        {
          "SubId": "_sntprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_sntprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbPrintf', 'StringCbPrintf_l', 'StringCbPrintf_lEx', 'StringCbPrintfEx', 'StringCchPrintf', 'StringCchPrintfEx'"
          }
        },
        {
          "SubId": "_snwprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_snwprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_snwprintf_s', 'StringCbPrintf', 'StringCbPrintf_l', 'StringCbPrintf_lEx', 'StringCbPrintfEx', 'StringCchPrintf', 'StringCchPrintfEx'"
          }
        },
        {
          "SubId": "_stprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_stprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbPrintf', 'StringCbPrintf_l', 'StringCbPrintf_lEx', 'StringCbPrintfEx', 'StringCchPrintf', 'StringCchPrintfEx'"
          }
        },
        {
          "SubId": "_vsnprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_vsnprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsnprintf_s', 'StringCchVPrintf', 'StringCchVPrintf_l', 'StringCchVPrintf_lEx', 'StringCchVPrintfEx'"
          }
        },
        {
          "SubId": "_vsntprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_vsntprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbVPrintf', 'StringCbVPrintf_l', 'StringCbVPrintf_lEx', 'StringCbVPrintfEx', 'StringCchVPrintf', 'StringCchVPrintf_l', 'StringCchVPrintf_lEx', 'StringCchVPrintfEx'"
          }
        },
        {
          "SubId": "_vsnwprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_vsnwprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsnwprintf_s', 'StringCbVPrintf', 'StringCbVPrintf_l', 'StringCbVPrintf_lEx', 'StringCbVPrintfEx'"
          }
        },
        {
          "SubId": "_vstprintf",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_vstprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbVPrintf', 'StringCbVPrintf_l', 'StringCbVPrintf_lEx', 'StringCbVPrintfEx', 'StringCchVPrintf', 'StringCchVPrintf_l', 'StringCchVPrintf_lEx', 'StringCchVPrintfEx'"
          }
        },
        {
          "SubId": "fprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fprintf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'fprintf' with 'fprintf_s'.",
              "Find": "fprintf",
              "ReplaceWith": "fprintf_s"
            }
          }
        },
        {
          "SubId": "fwprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fwprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fwprintf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'fwprintf' with 'fwprintf_s'.",
              "Find": "fwprintf",
              "ReplaceWith": "fwprintf_s"
            }
          }
        },
        {
          "SubId": "printf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>printf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'printf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'printf' with 'printf_s'.",
              "Find": "printf",
              "ReplaceWith": "printf_s"
            }
          }
        },
        {
          "SubId": "snprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>snprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'snprintf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'snprintf' with 'snprintf_s'.",
              "Find": "snprintf",
              "ReplaceWith": "snprintf_s"
            }
          }
        },
        {
          "SubId": "sprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>sprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'asprintf', 'sprintf_s', 'StringCbPrintf', 'StringCbPrintfEx', 'StringCchPrintf', 'StringCchPrintfEx'"
          }
        },
        {
          "SubId": "swprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>swprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbPrintf', 'StringCbPrintf_l', 'StringCbPrintf_lEx', 'StringCbPrintfEx', 'StringCchPrintf', 'StringCchPrintfEx', 'swprintf_s'"
          }
        },
        {
          "SubId": "vfprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vfprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vfprintf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vfprintf' with 'vfprintf_s'.",
              "Find": "vfprintf",
              "ReplaceWith": "vfprintf_s"
            }
          }
        },
        {
          "SubId": "vprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vprintf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vprintf' with 'vprintf_s'.",
              "Find": "vprintf",
              "ReplaceWith": "vprintf_s"
            }
          }
        },
        {
          "SubId": "vsnprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vsnprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbVPrintf', 'StringCbVPrintf_l', 'StringCbVPrintf_lEx', 'StringCbVPrintfEx', 'StringCchVPrintf', 'StringCchVPrintf_l', 'StringCchVPrintf_lEx', 'StringCchVPrintfEx', 'vsnprintf_s'"
          }
        },
        {
          "SubId": "vsprintf",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vsprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbVPrintf', 'StringCbVPrintf_l', 'StringCbVPrintf_lEx', 'StringCbVPrintfEx', 'StringCchVPrintf', 'StringCchVPrintf_l', 'StringCchVPrintf_lEx', 'StringCchVPrintfEx', 'vasprintf', 'vsprintf_s'"
          }
        },
        {
          "SubId": "vswprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vswprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbVPrintf', 'StringCbVPrintf_l', 'StringCbVPrintf_lEx', 'StringCbVPrintfEx', 'StringCchVPrintf', 'StringCchVPrintf_l', 'StringCchVPrintf_lEx', 'StringCchVPrintfEx', 'vswprintf_s'"
          }
        },
        {
          "SubId": "vwprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vwprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vwprintf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'vwprintf' with 'vwprintf_s'.",
              "Find": "vwprintf",
              "ReplaceWith": "vwprintf_s"
            }
          }
        },
        {
          "SubId": "wnsprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wnsprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbPrintf', 'StringCbPrintf_l', 'StringCbPrintf_lEx', 'StringCbPrintfEx', 'StringCchPrintf', 'StringCchPrintfEx'"
          }
        },
        {
          "SubId": "wprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wprintf_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wprintf' with 'wprintf_s'.",
              "Find": "wprintf",
              "ReplaceWith": "wprintf_s"
            }
          }
        },
        {
          "SubId": "wsprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wsprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbPrintf', 'StringCbPrintf_l', 'StringCbPrintf_lEx', 'StringCbPrintfEx', 'StringCchPrintf', 'StringCchPrintfEx'"
          }
        },
        {
          "SubId": "wvnsprintf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wvnsprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbVPrintf', 'StringCbVPrintf_l', 'StringCbVPrintf_lEx', 'StringCbVPrintfEx', 'StringCchVPrintf', 'StringCchVPrintf_l', 'StringCchVPrintf_lEx', 'StringCchVPrintfEx'"
          }
        },
        {
          "SubId": "wvsprintf",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wvsprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'StringCbVPrintf', 'StringCbVPrintf_l', 'StringCbVPrintf_lEx', 'StringCbVPrintfEx', 'StringCchVPrintf', 'StringCchVPrintf_l', 'StringCchVPrintf_lEx', 'StringCchVPrintfEx'"
          }
        },
        {
          "SubId": "_snwprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_snwprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_snwprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_vsnprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_vsnprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsnprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "_vsnwprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>_vsnwprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsnwprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "asprintf",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>asprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'sprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "fprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "fwprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fwprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fwprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "printf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>printf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'printf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "snprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>snprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'snprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "sprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>sprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'sprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbPrintf",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbPrintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_snprintf', '_sntprintf', '_snwprintf', '_stprintf', 'sprintf', 'swprintf', 'wnsprintf', 'wsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbPrintf_l",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbPrintf_l))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_snprintf', '_sntprintf', '_snwprintf', '_stprintf', 'swprintf', 'wnsprintf', 'wsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbPrintf_lEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbPrintf_lEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_snprintf', '_sntprintf', '_snwprintf', '_stprintf', 'swprintf', 'wnsprintf', 'wsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbPrintfEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbPrintfEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_snprintf', '_sntprintf', '_snwprintf', '_stprintf', 'sprintf', 'swprintf', 'wnsprintf', 'wsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbVPrintf",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbVPrintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsntprintf', '_vsnwprintf', '_vstprintf', 'vsnprintf', 'vsprintf', 'vswprintf', 'wvnsprintf', 'wvsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbVPrintf_l",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbVPrintf_l))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsntprintf', '_vsnwprintf', '_vstprintf', 'vsnprintf', 'vsprintf', 'vswprintf', 'wvnsprintf', 'wvsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbVPrintf_lEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbVPrintf_lEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsntprintf', '_vsnwprintf', '_vstprintf', 'vsnprintf', 'vsprintf', 'vswprintf', 'wvnsprintf', 'wvsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCbVPrintfEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCbVPrintfEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsntprintf', '_vsnwprintf', '_vstprintf', 'vsnprintf', 'vsprintf', 'vswprintf', 'wvnsprintf', 'wvsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchPrintf",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchPrintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_snprintf', '_sntprintf', '_snwprintf', '_stprintf', 'sprintf', 'swprintf', 'wnsprintf', 'wsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchPrintfEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchPrintfEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_snprintf', '_sntprintf', '_snwprintf', '_stprintf', 'sprintf', 'swprintf', 'wnsprintf', 'wsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchVPrintf",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchVPrintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsnprintf', '_vsntprintf', '_vstprintf', 'vsnprintf', 'vsprintf', 'vswprintf', 'wvnsprintf', 'wvsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchVPrintf_l",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchVPrintf_l))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsnprintf', '_vsntprintf', '_vstprintf', 'vsnprintf', 'vsprintf', 'vswprintf', 'wvnsprintf', 'wvsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchVPrintf_lEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchVPrintf_lEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsnprintf', '_vsntprintf', '_vstprintf', 'vsnprintf', 'vsprintf', 'vswprintf', 'wvnsprintf', 'wvsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "StringCchVPrintfEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>StringCchVPrintfEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'_vsnprintf', '_vsntprintf', '_vstprintf', 'vsnprintf', 'vsprintf', 'vswprintf', 'wvnsprintf', 'wvsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "swprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>swprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'swprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vasprintf",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vasprintf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vfprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vfprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vfprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vsnprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vsnprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vsnprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vsprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vsprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vsprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vswprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vswprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vswprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "vwprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>vwprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'vwprintf'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wprintf_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wprintf_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wprintf'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/010",
      "Name": "UseSecureApi/TimeOperations",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "asctime",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>asctime))\\s*\\(",
          "MessageArguments": {
            "alternative": "'asctime_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'asctime' with 'asctime_s'.",
              "Find": "asctime",
              "ReplaceWith": "asctime_s"
            }
          }
        },
        {
          "SubId": "ctime",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>ctime))\\s*\\(",
          "MessageArguments": {
            "alternative": "'ctime_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'ctime' with 'ctime_s'.",
              "Find": "ctime",
              "ReplaceWith": "ctime_s"
            }
          }
        },
        {
          "SubId": "gmtime",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>gmtime))\\s*\\(",
          "MessageArguments": {
            "alternative": "'gmtime_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'gmtime' with 'gmtime_s'.",
              "Find": "gmtime",
              "ReplaceWith": "gmtime_s"
            }
          }
        },
        {
          "SubId": "localtime",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>localtime))\\s*\\(",
          "MessageArguments": {
            "alternative": "'localtime_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'localtime' with 'localtime_s'.",
              "Find": "localtime",
              "ReplaceWith": "localtime_s"
            }
          }
        },
        {
          "SubId": "asctime_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>asctime_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'asctime'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "ctime_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>ctime_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'ctime'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "gmtime_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>gmtime_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'gmtime'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "localtime_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>localtime_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'localtime'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/011",
      "Name": "UseSecureApi/Search",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "bsearch",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>bsearch))\\s*\\(",
          "MessageArguments": {
            "alternative": "'bsearch_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'bsearch' with 'bsearch_s'.",
              "Find": "bsearch",
              "ReplaceWith": "bsearch_s"
            }
          }
        },
        {
          "SubId": "bsearch_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>bsearch_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'bsearch'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/012",
      "Name": "UseSecureApi/MessageHandling",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "ChangeWindowMessageFilter",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>ChangeWindowMessageFilter))\\s*\\(",
          "MessageArguments": {
            "alternative": "'ChangeWindowMessageFilterEx'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'ChangeWindowMessageFilter' with 'ChangeWindowMessageFilterEx'.",
              "Find": "ChangeWindowMessageFilter",
              "ReplaceWith": "ChangeWindowMessageFilterEx"
            }
          }
        },
        {
          "SubId": "ChangeWindowMessageFilterEx",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>ChangeWindowMessageFilterEx))\\s*\\(",
          "MessageArguments": {
            "alternative": "'ChangeWindowMessageFilter'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/013",
      "Name": "UseSecureApi/FileOperations",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "fopen",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fopen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fopen_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'fopen' with 'fopen_s'.",
              "Find": "fopen",
              "ReplaceWith": "fopen_s"
            }
          }
        },
        {
          "SubId": "freopen",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>freopen))\\s*\\(",
          "MessageArguments": {
            "alternative": "'freopen_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'freopen' with 'freopen_s'.",
              "Find": "freopen",
              "ReplaceWith": "freopen_s"
            }
          }
        },
        {
          "SubId": "mktemp",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>mktemp))\\s*\\(",
          "MessageArguments": {
            "alternative": "'mkstemp'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'mktemp' with 'mkstemp'.",
              "Find": "mktemp",
              "ReplaceWith": "mkstemp"
            }
          }
        },
        {
          "SubId": "tmpnam",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>tmpnam))\\s*\\(",
          "MessageArguments": {
            "alternative": "'tmpnam_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'tmpnam' with 'tmpnam_s'.",
              "Find": "tmpnam",
              "ReplaceWith": "tmpnam_s"
            }
          }
        },
        {
          "SubId": "fopen_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fopen_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fopen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "freopen_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>freopen_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'freopen'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "mkstemp",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>mkstemp))\\s*\\(",
          "MessageArguments": {
            "alternative": "'mktemp'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "tmpnam_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>tmpnam_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'tmpnam'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/014",
      "Name": "UseSecureApi/Environment/Variables",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "getenv",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>getenv))\\s*\\(",
          "MessageArguments": {
            "alternative": "'getenv_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'getenv' with 'getenv_s'.",
              "Find": "getenv",
              "ReplaceWith": "getenv_s"
            }
          }
        },
        {
          "SubId": "getenv_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>getenv_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'getenv'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/015",
      "Name": "UseSecureApi/Memory/Copy",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "memcpy",
          "Level": "Error",
          "ContentsRegex": "\\b(?P<refine>(?P<id>memcpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'memcpy_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'memcpy' with 'memcpy_s'.",
              "Find": "memcpy",
              "ReplaceWith": "memcpy_s"
            }
          }
        },
        {
          "SubId": "memmove",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>memmove))\\s*\\(",
          "MessageArguments": {
            "alternative": "'memmove_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'memmove' with 'memmove_s'.",
              "Find": "memmove",
              "ReplaceWith": "memmove_s"
            }
          }
        },
        {
          "SubId": "wmemcpy",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wmemcpy))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wmemcpy_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wmemcpy' with 'wmemcpy_s'.",
              "Find": "wmemcpy",
              "ReplaceWith": "wmemcpy_s"
            }
          }
        },
        {
          "SubId": "wmemmove",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wmemmove))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wmemmove_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'wmemmove' with 'wmemmove_s'.",
              "Find": "wmemmove",
              "ReplaceWith": "wmemmove_s"
            }
          }
        },
        {
          "SubId": "memcpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>memcpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'memcpy'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "memmove_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>memmove_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'memmove'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wmemcpy_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wmemcpy_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wmemcpy', 'wmemmove'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "wmemmove_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>wmemmove_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'wmemmove'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/016",
      "Name": "UseSecureApi/Sorting",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "qsort",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>qsort))\\s*\\(",
          "MessageArguments": {
            "alternative": "'qsort_s'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'qsort' with 'qsort_s'.",
              "Find": "qsort",
              "ReplaceWith": "qsort_s"
            }
          }
        },
        {
          "SubId": "qsort_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>qsort_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'qsort'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/017",
      "Name": "UseSecureApi/Stream/Navigation",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "rewind",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>rewind))\\s*\\(",
          "MessageArguments": {
            "alternative": "'fseek'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'rewind' with 'fseek'.",
              "Find": "rewind",
              "ReplaceWith": "fseek"
            }
          }
        },
        {
          "SubId": "fseek",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>fseek))\\s*\\(",
          "MessageArguments": {
            "alternative": "'rewind'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/018",
      "Name": "UseSecureApi/Stream/Buffering",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "setbuf",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>setbuf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'setvbuf'"
          },
          "Fixes": {
            "replaceInsecureApi": {
              "Description": "Replace 'setbuf' with 'setvbuf'.",
              "Find": "setbuf",
              "ReplaceWith": "setvbuf"
            }
          }
        },
        {
          "SubId": "setvbuf",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>setvbuf))\\s*\\(",
          "MessageArguments": {
            "alternative": "'setbuf'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    },
    {
      "Id": "SEC104/019",
      "Name": "UseSecureApi/ErrorHandling",
      "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a potentially insecure API that could be replaced with a more secure alternative: {2:alternative}.",
      "Description": "Developers should use secure API in preferance of insecure alternates.",
      "FileNameAllowRegex": "$CSourceFiles",
      "MatchExpressions": [
        {
          "SubId": "strerror",
          "Level": "Warning",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strerror))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strerror_r', 'strerror_s'"
          }
        },
        {
          "SubId": "strerror_r",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strerror_r))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strerror'"
          },
          "MessageId": "Default_Secure"
        },
        {
          "SubId": "strerror_s",
          "Message": "'{0:scanTarget}' contains a call to '{1:refine}', a more secure alternative to one or more potentially insecure APIs: {2:alternative}.",
          "Kind": "Pass",
          "ContentsRegex": "\\b(?P<refine>(?P<id>strerror_s))\\s*\\(",
          "MessageArguments": {
            "alternative": "'strerror'"
          },
          "MessageId": "Default_Secure"
        }
      ]
    }
  ]
}
